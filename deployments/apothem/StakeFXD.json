{
  "address": "0x84CD62f750fa082cF3Aa8055F2675d13FB94Fc65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CoolOffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ExpiryTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "InterestPrecisionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxPoolAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxStakeAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxStakingDaysChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MinStakeAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "RateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "RedeemIntervalChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "StartTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "name": "WithdrewStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewXdc",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "canWithdrawStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "canWithdrawStakeIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEarned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coolOff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStakeHolder",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfStakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numberofStaker",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getStakerIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestPrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimerAddress",
          "type": "address"
        }
      ],
      "name": "nextDripAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coolOff_",
          "type": "uint256"
        }
      ],
      "name": "setCoolOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interestPrecision_",
          "type": "uint256"
        }
      ],
      "name": "setInterestPrecision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPoolAmount_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPoolAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxStakeAmount_",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxStakingDays_",
          "type": "uint256"
        }
      ],
      "name": "setMaxStakingDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minStakeAmount_",
          "type": "uint256"
        }
      ],
      "name": "setMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interest_",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemInterval_",
          "type": "uint256"
        }
      ],
      "name": "setRedeemInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime_",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeHolders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerHolder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "staked",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "unstaked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stakedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRedeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRedeemedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalStakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdrawXdc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30b02bb93db1ae7cf6e6d70cd5a5029eede5699d494e1803fedf6872259e1b87",
  "receipt": {
    "to": null,
    "from": "0x09aE5Af01b979d14cD2Ff237aFECBf8b5B29929b",
    "contractAddress": "0x84CD62f750fa082cF3Aa8055F2675d13FB94Fc65",
    "transactionIndex": 1,
    "gasUsed": "5451219",
    "logsBloom": "0x
    "blockHash": "0xe8753d07416cb38743bdf30fc3bc63ca804fa57bed00d2fcea63e53c4dcf3047",
    "transactionHash": "0x30b02bb93db1ae7cf6e6d70cd5a5029eede5699d494e1803fedf6872259e1b87",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 50179189,
        "transactionHash": "0x30b02bb93db1ae7cf6e6d70cd5a5029eede5699d494e1803fedf6872259e1b87",
        "address": "0x84CD62f750fa082cF3Aa8055F2675d13FB94Fc65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000009ae5af01b979d14cd2ff237afecbf8b5b29929b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x62ad9a00013458e64afde358dff8d60a0c7b83fcfd1cae6aacb5a6c3e1eb92dd"
      }
    ],
    "blockNumber": 50179189,
    "cumulativeGasUsed": "5451219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xab421538383e7d5652f1807fb0a7a19d178a3143",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "c03c9e75dd2fc2d68e0978e3e0ae8fc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CoolOffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ExpiryTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"InterestPrecisionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPoolAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxStakeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxStakingDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RedeemIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StartTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"WithdrewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewXdc\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"canWithdrawStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"canWithdrawStakeIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEarned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStakeHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberofStaker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimerAddress\",\"type\":\"address\"}],\"name\":\"nextDripAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coolOff_\",\"type\":\"uint256\"}],\"name\":\"setCoolOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestPrecision_\",\"type\":\"uint256\"}],\"name\":\"setInterestPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPoolAmount_\",\"type\":\"uint256\"}],\"name\":\"setMaxPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStakingDays_\",\"type\":\"uint256\"}],\"name\":\"setMaxStakingDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interest_\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemInterval_\",\"type\":\"uint256\"}],\"name\":\"setRedeemInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRedeemedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalStakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawXdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeFXD.sol\":\"StakeFXD\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StakeFXD.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Multiplies two numbers, throws on overflow.\\r\\n     */\\r\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\r\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (_a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        c = _a * _b;\\r\\n        assert(c / _a == _b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two numbers, truncating the quotient.\\r\\n     */\\r\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\r\\n        // uint256 c = _a / _b;\\r\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\r\\n        return _a / _b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\r\\n        assert(_b <= _a);\\r\\n        return _a - _b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two numbers, throws on overflow.\\r\\n     */\\r\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\r\\n        c = _a + _b;\\r\\n        assert(c >= _a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary AddressUtils {\\r\\n    /**\\r\\n     * Returns whether the target address is a contract\\r\\n     * @dev This function will return false if invoked during the constructor of a contract,\\r\\n     * as the code is not actually created until after the constructor finishes.\\r\\n     * @param _addr address to check\\r\\n     * @return whether the target address is a contract\\r\\n     */\\r\\n    function isContract(address _addr) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // XXX Currently there is no better way to check if there is a contract in an address\\r\\n        // than to check the size of the code at that address.\\r\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\r\\n        // for more details about how this works.\\r\\n        // TODO Check this again before the Serenity release, because all addresses will be\\r\\n        // contracts then.\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract StakeFXD is Pausable, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using AddressUtils for address;\\r\\n\\r\\n    uint256 private ONE_DAY = 60; //86400\\r\\n\\r\\n    IERC20 token;\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public minStakeAmount = 100 * 10 ** 18;\\r\\n    uint256 public maxStakeAmount = 1000 * 10 ** 18;\\r\\n    uint256 public coolOff = ONE_DAY * 7;\\r\\n    uint256 public interest;\\r\\n    uint256 public totalRedeemed = 0;\\r\\n    uint256 public redeemInterval = 10 * ONE_DAY;\\r\\n    uint256 public startTime;\\r\\n    uint256 public maxStakingDays;\\r\\n    uint256 public expiryTime;\\r\\n    uint256 public maxPoolAmount = 10000 * 10 ** 18; //greater than or equal to maxstakeamount\\r\\n    uint256 public pendingPoolAmount = maxPoolAmount;\\r\\n\\r\\n    uint256 public interestPrecision = 100;\\r\\n\\r\\n    event Staked(address staker, uint256 amount);\\r\\n\\r\\n    event Unstaked(address staker, uint256 amount);\\r\\n    event WithdrewStake(address staker, uint256 principal, uint256 earnings);\\r\\n    event ClaimedRewards(address staker, uint256 amount);\\r\\n\\r\\n    // Parameter Change Events\\r\\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\\r\\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\\r\\n    event RateChanged(uint256 prevValue, uint256 newValue);\\r\\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\\r\\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\\r\\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\\r\\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\\r\\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\\r\\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\\r\\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\\r\\n\\r\\n    event WithdrewTokens(address beneficiary, uint256 amount);\\r\\n    event WithdrewXdc(address beneficiary, uint256 amount);\\r\\n\\r\\n    struct Stake {\\r\\n        address stakerHolder;\\r\\n        uint256 stakedAmount;\\r\\n        bool staked;\\r\\n        bool exists;\\r\\n        bool unstaked;\\r\\n        uint256 stakedTime;\\r\\n        uint256 unstakedTime;\\r\\n        uint256 totalRedeemed;\\r\\n        uint256 lastRedeemedAt;\\r\\n        uint256 balance;\\r\\n        uint256 originalStakeAmount;\\r\\n    }\\r\\n\\r\\n    mapping(address => Stake) public stakes;\\r\\n    mapping(address => bool) public addressStaked;\\r\\n    address[] public stakeHolders;\\r\\n\\r\\n    modifier whenStaked() {\\r\\n        require(stakes[msg.sender].staked == true, \\\"FXD: not staked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotStaked() {\\r\\n        require(stakes[msg.sender].staked == false, \\\"FXD: already staked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenNotUnStaked() {\\r\\n        require(stakes[msg.sender].unstaked == false, \\\"FXD: in unstake period\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenUnStaked() {\\r\\n        require(stakes[msg.sender].unstaked == true, \\\"FXD: not un-staked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canRedeemDrip(address staker) {\\r\\n        require(stakes[staker].exists, \\\"FXD: staker does not exist\\\");\\r\\n        require(\\r\\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\\r\\n            \\\"FXD: cannot claim drip yet\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function canWithdrawStake(address staker) public view returns (bool) {\\r\\n        require(stakes[staker].exists, \\\"FXD: stakeholder does not exists\\\");\\r\\n        require(\\r\\n            stakes[staker].staked == false,\\r\\n            \\\"FXD: stakeholder still has stake\\\"\\r\\n        );\\r\\n        require(stakes[staker].unstaked == true, \\\"FXD: not in unstake period\\\");\\r\\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\\r\\n        return coolOff < unstakeTenure;\\r\\n    }\\r\\n\\r\\n    constructor(IERC20 token_, uint256 interest_) {\\r\\n        require(\\r\\n            address(token_) != address(0),\\r\\n            \\\"Token Address cannot be address 0\\\"\\r\\n        );\\r\\n        token = token_;\\r\\n        interest = interest_;\\r\\n    }\\r\\n\\r\\n    function transferToken(address to, uint256 amount) external onlyOwner {\\r\\n        require(token.transfer(to, amount), \\\"Token transfer failed!\\\");\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount_) public whenNotStaked whenNotUnStaked {\\r\\n        require(\\r\\n            totalStaked + amount_ <= maxPoolAmount,\\r\\n            \\\"Exceeds maximum pool value\\\"\\r\\n        );\\r\\n        require(amount_ >= minStakeAmount, \\\"FXD: invalid amount\\\");\\r\\n        require(amount_ <= maxStakeAmount, \\\"FXD: invalid amount\\\");\\r\\n\\r\\n        Stake memory staker = stakes[msg.sender];\\r\\n\\r\\n        staker.staked = true;\\r\\n        if (staker.exists == false) {\\r\\n            staker.exists = true;\\r\\n            staker.stakerHolder = msg.sender;\\r\\n        }\\r\\n\\r\\n        stakeHolders.push(msg.sender);\\r\\n        staker.stakedTime = block.timestamp;\\r\\n        staker.totalRedeemed = 0;\\r\\n        if (startTime > 0) staker.lastRedeemedAt = startTime;\\r\\n        else staker.lastRedeemedAt = block.timestamp;\\r\\n        staker.stakedAmount = amount_;\\r\\n        staker.originalStakeAmount = amount_;\\r\\n        staker.balance = 0;\\r\\n\\r\\n        totalStaked = totalStaked.add(amount_);\\r\\n        pendingPoolAmount = pendingPoolAmount.sub(amount_);\\r\\n\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount_);\\r\\n\\r\\n        emit Staked(msg.sender, amount_);\\r\\n    }\\r\\n\\r\\n    function unstake() public whenStaked whenNotUnStaked {\\r\\n        uint256 leftoverBalance = _earned(msg.sender);\\r\\n        Stake memory staker = stakes[msg.sender];\\r\\n        staker.unstakedTime = block.timestamp;\\r\\n        staker.staked = false;\\r\\n        staker.balance = leftoverBalance;\\r\\n        staker.unstaked = true;\\r\\n\\r\\n        totalStaked = totalStaked.sub(staker.stakedAmount);\\r\\n        totalStaked = pendingPoolAmount.add(staker.stakedAmount);\\r\\n        (bool exists, uint256 stakerIndex) = getStakerIndex(msg.sender);\\r\\n        require(exists, \\\"FXD: staker does not exist\\\");\\r\\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\\r\\n        delete stakeHolders[stakeHolders.length - 1];\\r\\n        stakeHolders.pop();\\r\\n\\r\\n        emit Unstaked(msg.sender, staker.stakedAmount);\\r\\n    }\\r\\n\\r\\n    function _earned(\\r\\n        address beneficiary_\\r\\n    ) internal view returns (uint256 earned) {\\r\\n        if (stakes[beneficiary_].staked == false) return 0;\\r\\n        uint256 tenure;\\r\\n        if (block.timestamp > expiryTime)\\r\\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\\r\\n        else tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\\r\\n        earned = tenure\\r\\n            .div(ONE_DAY)\\r\\n            .mul(stakes[beneficiary_].stakedAmount)\\r\\n            .mul(interest.div(interestPrecision))\\r\\n            .div(100)\\r\\n            .div(365);\\r\\n    }\\r\\n\\r\\n    function claimEarned() public canRedeemDrip(_msgSender()) returns (bool) {\\r\\n        require(stakes[_msgSender()].staked == true, \\\"FXD: not staked\\\");\\r\\n\\r\\n        // update the redeemdate even if earnings are 0\\r\\n        uint256 earnings = _earned(_msgSender());\\r\\n\\r\\n        if (earnings > 0) {\\r\\n            token.transfer(_msgSender(), earnings);\\r\\n        }\\r\\n\\r\\n        stakes[_msgSender()].totalRedeemed += earnings;\\r\\n        stakes[_msgSender()].lastRedeemedAt = block.timestamp;\\r\\n\\r\\n        totalRedeemed += earnings;\\r\\n\\r\\n        emit ClaimedRewards(_msgSender(), earnings);\\r\\n    }\\r\\n\\r\\n    function withdrawStake() public whenUnStaked {\\r\\n        require(canWithdrawStake(msg.sender), \\\"FXD: cannot withdraw yet\\\");\\r\\n        Stake memory staker = stakes[msg.sender];\\r\\n        uint256 withdrawAmount = staker.stakedAmount;\\r\\n        uint256 leftoverBalance = staker.balance;\\r\\n        token.transfer(msg.sender, withdrawAmount);\\r\\n        if (leftoverBalance > 0) token.transfer(msg.sender, leftoverBalance);\\r\\n        staker.stakedAmount = 0;\\r\\n        staker.balance = 0;\\r\\n        staker.unstaked = false;\\r\\n        staker.totalRedeemed += leftoverBalance;\\r\\n        staker.lastRedeemedAt = block.timestamp;\\r\\n        totalRedeemed += leftoverBalance;\\r\\n        emit WithdrewStake(msg.sender, withdrawAmount, leftoverBalance);\\r\\n    }\\r\\n\\r\\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\\r\\n        require(\\r\\n            stakes[claimerAddress].staked == true,\\r\\n            \\\"FXD: address has not staked\\\"\\r\\n        );\\r\\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\\r\\n    }\\r\\n\\r\\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\\r\\n        require(stakes[staker].exists, \\\"FXD: stakeholder does not exists\\\");\\r\\n        require(\\r\\n            stakes[staker].staked == false,\\r\\n            \\\"FXD: stakeholder still has stake\\\"\\r\\n        );\\r\\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\\r\\n        if (coolOff < unstakeTenure) return 0;\\r\\n        return coolOff - unstakeTenure;\\r\\n    }\\r\\n\\r\\n    function getAllStakeHolder() public view returns (address[] memory) {\\r\\n        return stakeHolders;\\r\\n    }\\r\\n\\r\\n    function getStakerIndex(\\r\\n        address staker\\r\\n    ) public view returns (bool, uint256) {\\r\\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\\r\\n            if (stakeHolders[i] == staker) return (true, i);\\r\\n        }\\r\\n        return (false, 0);\\r\\n    }\\r\\n\\r\\n    function earned(address staker) public view returns (uint256 earnings) {\\r\\n        earnings = _earned(staker);\\r\\n    }\\r\\n\\r\\n    function getNumberOfStakers() public view returns (uint256 numberofStaker) {\\r\\n        return stakeHolders.length;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        Owner Functionality Starts\\r\\n    */\\r\\n\\r\\n    function setMinStakeAmount(uint256 minStakeAmount_) public onlyOwner {\\r\\n        require(\\r\\n            minStakeAmount_ > 0,\\r\\n            \\\"FXD: minimum stake amount should be greater than 0\\\"\\r\\n        );\\r\\n        uint256 prevValue = minStakeAmount;\\r\\n        minStakeAmount = minStakeAmount_;\\r\\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\\r\\n    }\\r\\n\\r\\n    function setMaxStakeAmount(uint256 maxStakeAmount_) public onlyOwner {\\r\\n        require(\\r\\n            maxStakeAmount_ > 0,\\r\\n            \\\"FXD: maximum stake amount should be greater than 0\\\"\\r\\n        );\\r\\n        uint256 prevValue = maxStakeAmount;\\r\\n        maxStakeAmount = maxStakeAmount_;\\r\\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\\r\\n    }\\r\\n\\r\\n    function setRate(uint256 interest_) public onlyOwner {\\r\\n        uint256 prevValue = interest;\\r\\n        interest = interest_;\\r\\n        emit RateChanged(prevValue, interest);\\r\\n    }\\r\\n\\r\\n    function setCoolOff(uint256 coolOff_) public onlyOwner {\\r\\n        uint256 prevValue = coolOff;\\r\\n        coolOff = coolOff_;\\r\\n        emit CoolOffChanged(prevValue, coolOff);\\r\\n    }\\r\\n\\r\\n    function setRedeemInterval(uint256 redeemInterval_) public onlyOwner {\\r\\n        uint256 prevValue = redeemInterval;\\r\\n        redeemInterval = redeemInterval_;\\r\\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\\r\\n    }\\r\\n\\r\\n    function setInterestPrecision(uint256 interestPrecision_) public onlyOwner {\\r\\n        require(interestPrecision_ > 0, \\\"FXD: precision cannot be 0\\\");\\r\\n        uint256 prevValue = interestPrecision;\\r\\n        interestPrecision = interestPrecision_;\\r\\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 startTime_) public onlyOwner {\\r\\n        require(\\r\\n            maxStakingDays > 0,\\r\\n            \\\"FXD: please set max staking days to be greater than 0\\\"\\r\\n        );\\r\\n        require(startTime_ > 0, \\\"FXD: startTime cannot be 0\\\");\\r\\n        require(\\r\\n            block.timestamp < startTime_,\\r\\n            \\\"FXD: startTime must be in the future\\\"\\r\\n        );\\r\\n        uint256 prevValue = startTime;\\r\\n        startTime = startTime_;\\r\\n        emit StartTimeChanged(prevValue, startTime);\\r\\n        prevValue = expiryTime;\\r\\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\\r\\n        emit ExpiryTimeChanged(prevValue, expiryTime);\\r\\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\\r\\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMaxStakingDays(uint256 maxStakingDays_) public onlyOwner {\\r\\n        require(maxStakingDays_ > 0, \\\"FXD: maxStakingDays cannot be 0\\\");\\r\\n        uint256 prevValue = maxStakingDays;\\r\\n        maxStakingDays = maxStakingDays_;\\r\\n        emit StartTimeChanged(prevValue, maxStakingDays);\\r\\n    }\\r\\n\\r\\n    function setMaxPoolAmount(uint256 maxPoolAmount_) public onlyOwner {\\r\\n        require(maxPoolAmount_ > 0, \\\"FXD: maxPoolAmount cannot be 0\\\");\\r\\n        require(\\r\\n            maxPoolAmount_ >= minStakeAmount,\\r\\n            \\\"FXD: maxPoolAmount should be greater than minStakeAmount\\\"\\r\\n        );\\r\\n        require(\\r\\n            maxPoolAmount_ >= maxStakeAmount,\\r\\n            \\\"FXD: maxPoolAmount should be greater than maxStakeAmount\\\"\\r\\n        );\\r\\n        uint256 prevValue = maxPoolAmount_;\\r\\n        maxPoolAmount = maxPoolAmount_;\\r\\n        if (maxPoolAmount > prevValue)\\r\\n            pendingPoolAmount = pendingPoolAmount.add(\\r\\n                maxPoolAmount - prevValue\\r\\n            );\\r\\n        else\\r\\n            pendingPoolAmount = pendingPoolAmount.add(\\r\\n                prevValue - maxPoolAmount\\r\\n            );\\r\\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(\\r\\n        address beneficiary_,\\r\\n        uint256 amount_\\r\\n    ) public onlyOwner {\\r\\n        require(amount_ > 0, \\\"FXD: token amount has to be greater than 0\\\");\\r\\n        token.safeTransfer(beneficiary_, amount_);\\r\\n        emit WithdrewTokens(beneficiary_, amount_);\\r\\n    }\\r\\n\\r\\n    function withdrawXdc(\\r\\n        address beneficiary_,\\r\\n        uint256 amount_\\r\\n    ) public onlyOwner {\\r\\n        require(amount_ > 0, \\\"FXD: xdc amount has to be greater than 0\\\");\\r\\n        payable(beneficiary_).transfer(amount_);\\r\\n        emit WithdrewXdc(beneficiary_, amount_);\\r\\n    }\\r\\n\\r\\n    function destroy() public onlyOwner {\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2076d6d37ace63fa149e08a263938a7925d66d82673ae9d783c49a98620800a2\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052603c60025568056bc75e2d63100000600555683635c9adc5dea000006006556007600254620000349190620002a5565b6007556000600955600254600a6200004d9190620002a5565b600a5569021e19e0c9bab2400000600e55600e54600f5560646010553480156200007657600080fd5b506040516200508f3803806200508f83398181016040528101906200009c91906200039f565b60008060006101000a81548160ff021916908315150217905550620000d6620000ca6200019f60201b60201c565b620001a760201b60201c565b60018081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000146906200046d565b60405180910390fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060088190555050506200048f565b600033905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620002b2826200026c565b9150620002bf836200026c565b9250828202620002cf816200026c565b91508282048414831517620002e957620002e862000276565b5b5092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032282620002f5565b9050919050565b6000620003368262000315565b9050919050565b620003488162000329565b81146200035457600080fd5b50565b60008151905062000368816200033d565b92915050565b62000379816200026c565b81146200038557600080fd5b50565b60008151905062000399816200036e565b92915050565b60008060408385031215620003b957620003b8620002f0565b5b6000620003c98582860162000357565b9250506020620003dc8582860162000388565b9150509250929050565b600082825260208201905092915050565b7f546f6b656e20416464726573732063616e6e6f7420626520616464726573732060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b600062000455602183620003e6565b91506200046282620003f7565b604082019050919050565b60006020820190508181036000830152620004888162000446565b9050919050565b614bf0806200049f6000396000f3fe608060405234801561001057600080fd5b50600436106102885760003560e01c8063817b1cd21161015c578063c392f766116100ce578063eb4af04511610087578063eb4af04514610736578063f014f96d14610752578063f188768414610782578063f2fde38b146107a0578063f33c7826146107bc578063f35dad40146107da57610288565b8063c392f76614610674578063c63410e414610692578063d02f0245146106b0578063dcc2a55e146106cc578063df156138146106e8578063e74d059f1461070657610288565b80639f37a0da116101205780639f37a0da146105c6578063a5ff3f80146105e4578063a694fc3a14610602578063acad41a41461061e578063b8f261e91461064e578063bed9d8611461066a57610288565b8063817b1cd21461055857806383197ef0146105765780638456cb59146105805780638da5cb5b1461058a57806399bc0aea146105a857610288565b80633f4ba83a11610200578063658b6729116101b9578063658b6729146104965780636ab9bba7146104b4578063715018a6146104e457806378e97925146104ee5780637e18627d1461050c5780637ef51bb91461053c57610288565b80633f4ba83a146103f85780634c1287e1146104025780635c975abb146104205780635d80ca321461043e5780635ed2b6821461045c578063601e77581461047857610288565b806316934fc41161025257806316934fc4146103445780631a8932391461037e5780632512f3cc1461039a5780632def6620146103b657806334fcf437146103c05780633e0a322d146103dc57610288565b80628cc2621461028d578062ca8af7146102bd57806306b091f9146102ee5780630ef5c03d1461030a5780631072cbea14610328575b600080fd5b6102a760048036038101906102a291906134e7565b6107f8565b6040516102b4919061352d565b60405180910390f35b6102d760048036038101906102d291906134e7565b61080a565b6040516102e5929190613563565b60405180910390f35b610308600480360381019061030391906135b8565b6108bc565b005b610312610991565b60405161031f91906135f8565b60405180910390f35b610342600480360381019061033d91906135b8565b610d2b565b005b61035e600480360381019061035991906134e7565b610e16565b6040516103759b9a99989796959493929190613622565b60405180910390f35b610398600480360381019061039391906136cd565b610eb7565b005b6103b460048036038101906103af91906136cd565b610f4f565b005b6103be6110cf565b005b6103da60048036038101906103d591906136cd565b611591565b005b6103f660048036038101906103f191906136cd565b6115e6565b005b610400611813565b005b61040a611825565b60405161041791906137b8565b60405180910390f35b6104286118b3565b60405161043591906135f8565b60405180910390f35b6104466118c9565b604051610453919061352d565b60405180910390f35b610476600480360381019061047191906136cd565b6118cf565b005b610480611924565b60405161048d919061352d565b60405180910390f35b61049e61192a565b6040516104ab919061352d565b60405180910390f35b6104ce60048036038101906104c991906134e7565b611937565b6040516104db91906135f8565b60405180910390f35b6104ec611b53565b005b6104f6611b67565b604051610503919061352d565b60405180910390f35b610526600480360381019061052191906134e7565b611b6d565b604051610533919061352d565b60405180910390f35b610556600480360381019061055191906135b8565b611c5c565b005b610560611d2b565b60405161056d919061352d565b60405180910390f35b61057e611d31565b005b610588611d59565b005b610592611d6b565b60405161059f91906137da565b60405180910390f35b6105b0611d94565b6040516105bd919061352d565b60405180910390f35b6105ce611d9a565b6040516105db919061352d565b60405180910390f35b6105ec611da0565b6040516105f9919061352d565b60405180910390f35b61061c600480360381019061061791906136cd565b611da6565b005b610638600480360381019061063391906136cd565b6122d9565b60405161064591906137da565b60405180910390f35b610668600480360381019061066391906136cd565b612318565b005b61067261236d565b005b61067c61278b565b604051610689919061352d565b60405180910390f35b61069a612791565b6040516106a7919061352d565b60405180910390f35b6106ca60048036038101906106c591906136cd565b612797565b005b6106e660048036038101906106e191906136cd565b61282f565b005b6106f06128c7565b6040516106fd919061352d565b60405180910390f35b610720600480360381019061071b91906134e7565b6128cd565b60405161072d91906135f8565b60405180910390f35b610750600480360381019061074b91906136cd565b6128ed565b005b61076c600480360381019061076791906134e7565b612985565b604051610779919061352d565b60405180910390f35b61078a612b29565b604051610797919061352d565b60405180910390f35b6107ba60048036038101906107b591906134e7565b612b2f565b005b6107c4612bb2565b6040516107d1919061352d565b60405180910390f35b6107e2612bb8565b6040516107ef919061352d565b60405180910390f35b600061080382612bbe565b9050919050565b60008060005b6013805490508110156108ae578373ffffffffffffffffffffffffffffffffffffffff1660138281548110610848576108476137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361089b5760018192509250506108b7565b80806108a690613853565b915050610810565b50600080915091505b915091565b6108c4612d98565b60008111610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe9061391e565b60405180910390fd5b6109548282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e169092919063ffffffff16565b7fc7373a0f64b3fe06c2144779575ea56ae879f4d815db065edd84fa72d744f128828260405161098592919061393e565b60405180910390a15050565b600061099b612e9c565b601160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a21906139b3565b60405180910390fd5b42600a54601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154610a7b91906139d3565b1115610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613a53565b60405180910390fd5b6001151560116000610acc612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5090613abf565b60405180910390fd5b6000610b6b610b66612e9c565b612bbe565b90506000811115610c1f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610bbc612e9c565b836040518363ffffffff1660e01b8152600401610bda92919061393e565b6020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190613b0b565b505b8060116000610c2c612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254610c7891906139d3565b925050819055504260116000610c8c612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601819055508060096000828254610cdf91906139d3565b925050819055507f2d5429efdeca7741a8cd94067b18d988bc4e5f1d5b8272c37b7bfc31e9bfa32c610d0f612e9c565b82604051610d1e92919061393e565b60405180910390a1505090565b610d33612d98565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d9092919061393e565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613b0b565b610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990613b84565b60405180910390fd5b5050565b60116020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff1690806003015490806004015490806005015490806006015490806007015490806008015490508b565b610ebf612d98565b60008111610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613bf0565b60405180910390fd5b60006010549050816010819055507f6c2a878920b0b43b70ba805d253b8ef45d63e2650fe183b92209f56d25faa07781601054604051610f43929190613c10565b60405180910390a15050565b610f57612d98565b60008111610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9190613c85565b60405180910390fd5b600554811015610fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd690613d17565b60405180910390fd5b600654811015611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90613da9565b60405180910390fd5b600081905081600e8190555080600e5411156110675761105c81600e5461104b9190613dc9565b600f54612ea490919063ffffffff16565b600f81905550611090565b611089600e54826110789190613dc9565b600f54612ea490919063ffffffff16565b600f819055505b7fd898486a6236f7d01b8c7202d7bdd86aed5338edb12cd160e26a6da5cf7b873581600e546040516110c3929190613c10565b60405180910390a15050565b60011515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90613abf565b60405180910390fd5b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff161515146111fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f290613e49565b60405180910390fd5b600061120633612bbe565b90506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff1615151515815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509050428160c00181815250506000816040019015159081151581525050818161012001818152505060018160800190151590811515815250506113948160200151600454612ecb90919063ffffffff16565b6004819055506113b38160200151600f54612ea490919063ffffffff16565b6004819055506000806113c53361080a565b9150915081611409576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611400906139b3565b60405180910390fd5b6013600160138054905061141d9190613dc9565b8154811061142e5761142d6137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166013828154811061146d5761146c6137f5565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601360016013805490506114c99190613dc9565b815481106114da576114d96137f5565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055601380548061151957611518613e69565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590557f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7533846020015160405161158392919061393e565b60405180910390a150505050565b611599612d98565b60006008549050816008819055507f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f7186816008546040516115da929190613c10565b60405180910390a15050565b6115ee612d98565b6000600c5411611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a90613f0a565b60405180910390fd5b60008111611676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166d90613f76565b60405180910390fd5b8042106116b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116af90614008565b60405180910390fd5b6000600b54905081600b819055507fbefe8e3983c0dc663c4ba451fc82d4ff7eb2e4ccc4b944874abea1ecc841feae81600b546040516116f9929190613c10565b60405180910390a1600d549050600254600c546117169190614028565b600b5461172391906139d3565b600d819055507fc1d34aeb4255f8133073ad43ad4f599a7cc710a56627c930558742338339864a81600d5460405161175c929190613c10565b60405180910390a160005b60138054905081101561180e57600b54601160006013848154811061178f5761178e6137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060181905550808061180690613853565b915050611767565b505050565b61181b612d98565b611823612ef2565b565b606060138054806020026020016040519081016040528092919081815260200182805480156118a957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161185f575b5050505050905090565b60008060009054906101000a900460ff16905090565b60065481565b6118d7612d98565b6000600a54905081600a819055507f92f8949f7bd43d3df08f807422fbea26604df863fef0aca2d4d2270c87c85d7181600a54604051611918929190613c10565b60405180910390a15050565b60075481565b6000601380549050905090565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff166119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf906140b6565b60405180910390fd5b60001515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5590614122565b60405180910390fd5b60011515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb9061418e565b60405180910390fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015442611b449190613dc9565b90508060075410915050919050565b611b5b612d98565b611b656000612f54565b565b600b5481565b600060011515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfc906141fa565b60405180910390fd5b600a54601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154611c5591906139d3565b9050919050565b611c64612d98565b60008111611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e9061428c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611ced573d6000803e3d6000fd5b507f7ee6aad23ecfe411c547b08941ceb6e03a997e50b9cc67875ec306fb5e6305c48282604051611d1f92919061393e565b60405180910390a15050565b60045481565b611d39612d98565b611d41611d6b565b73ffffffffffffffffffffffffffffffffffffffff16ff5b611d61612d98565b611d69613019565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600d5481565b600e5481565b600a5481565b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e33906142f8565b60405180910390fd5b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514611ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec990613e49565b60405180910390fd5b600e5481600454611ee391906139d3565b1115611f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1b90614364565b60405180910390fd5b600554811015611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f60906143d0565b60405180910390fd5b600654811115611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa5906143d0565b60405180910390fd5b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff1615151515815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509050600181604001901515908115158152505060001515816060015115150361215557600181606001901515908115158152505033816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b6013339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160a001818152505060008160e00181815250506000600b5411156121ea57600b54816101000181815250506121f6565b42816101000181815250505b81816020018181525050818161014001818152505060008161012001818152505061222c82600454612ea490919063ffffffff16565b60048190555061224782600f54612ecb90919063ffffffff16565b600f8190555061229c333084600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661307b909392919063ffffffff16565b7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d33836040516122cd92919061393e565b60405180910390a15050565b601381815481106122e957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612320612d98565b60006007549050816007819055507fa16ca404a4d3ddb7408ea136a081abdee15b5fe9bc9983214f1f3b2eb5e62f5081600754604051612361929190613c10565b60405180910390a15050565b60011515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514612403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fa9061443c565b60405180910390fd5b61240c33611937565b61244b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612442906144a8565b60405180910390fd5b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff161515151581526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481525050905060008160200151905060008261012001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016125f792919061393e565b6020604051808303816000875af1158015612616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263a9190613b0b565b5060008111156126e657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016126a192919061393e565b6020604051808303816000875af11580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e49190613b0b565b505b60008360200181815250506000836101200181815250506000836080019015159081151581525050808360e00181815161272091906139d3565b915081815250504283610100018181525050806009600082825461274491906139d3565b925050819055507f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136733838360405161277e939291906144c8565b60405180910390a1505050565b60085481565b60105481565b61279f612d98565b600081116127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d99061454b565b60405180910390fd5b6000600c54905081600c819055507fbefe8e3983c0dc663c4ba451fc82d4ff7eb2e4ccc4b944874abea1ecc841feae81600c54604051612823929190613c10565b60405180910390a15050565b612837612d98565b6000811161287a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612871906145dd565b60405180910390fd5b60006006549050816006819055507f7af071d76489ff69e32618f091b5d6de46af889de44f621a936e8c9615c463a9816006546040516128bb929190613c10565b60405180910390a15050565b600c5481565b60126020528060005260406000206000915054906101000a900460ff1681565b6128f5612d98565b60008111612938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292f9061466f565b60405180910390fd5b60006005549050816005819055507f3b8dcd7d08f8aa9e93d2afc54830c8b23db9b7264f3bc503eb5fc2a0289bc2cb81600554604051612979929190613c10565b60405180910390a15050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d906140b6565b60405180910390fd5b60001515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514612aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa390614122565b60405180910390fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015442612afc9190613dc9565b9050806007541015612b12576000915050612b24565b80600754612b209190613dc9565b9150505b919050565b60055481565b612b37612d98565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9d90614701565b60405180910390fd5b612baf81612f54565b50565b600f5481565b60095481565b6000801515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151503612c235760009050612d93565b6000600d54421115612c8657601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154600d54612c7f9190613dc9565b9050612cd7565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015442612cd49190613dc9565b90505b612d8f61016d612d816064612d73612cfc60105460085461310490919063ffffffff16565b612d65601160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612d576002548a61310490919063ffffffff16565b61311a90919063ffffffff16565b61311a90919063ffffffff16565b61310490919063ffffffff16565b61310490919063ffffffff16565b9150505b919050565b612da0612e9c565b73ffffffffffffffffffffffffffffffffffffffff16612dbe611d6b565b73ffffffffffffffffffffffffffffffffffffffff1614612e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0b9061476d565b60405180910390fd5b565b612e978363a9059cbb60e01b8484604051602401612e3592919061393e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061315c565b505050565b600033905090565b60008183612eb291906139d3565b905082811015612ec557612ec461478d565b5b92915050565b600082821115612ede57612edd61478d565b5b8183612eea9190613dc9565b905092915050565b612efa613224565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f3d612e9c565b604051612f4a91906137da565b60405180910390a1565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61302161326d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613064612e9c565b60405161307191906137da565b60405180910390a1565b6130fe846323b872dd60e01b85858560405160240161309c939291906147bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061315c565b50505050565b600081836131129190614822565b905092915050565b600080830361312c5760009050613156565b81836131389190614028565b90508183826131479190614822565b146131555761315461478d565b5b5b92915050565b60006131be826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132b79092919063ffffffff16565b90506000815114806131e05750808060200190518101906131df9190613b0b565b5b61321f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613216906148c5565b60405180910390fd5b505050565b61322c6118b3565b61326b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326290614931565b60405180910390fd5b565b6132756118b3565b156132b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ac9061499d565b60405180910390fd5b565b60606132c684846000856132cf565b90509392505050565b606082471015613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330b90614a2f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161333d9190614ac0565b60006040518083038185875af1925050503d806000811461337a576040519150601f19603f3d011682016040523d82523d6000602084013e61337f565b606091505b50915091506133908783838761339c565b92505050949350505050565b606083156133fe5760008351036133f6576133b685613411565b6133f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ec90614b23565b60405180910390fd5b5b829050613409565b6134088383613434565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156134475781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347b9190614b98565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134b482613489565b9050919050565b6134c4816134a9565b81146134cf57600080fd5b50565b6000813590506134e1816134bb565b92915050565b6000602082840312156134fd576134fc613484565b5b600061350b848285016134d2565b91505092915050565b6000819050919050565b61352781613514565b82525050565b6000602082019050613542600083018461351e565b92915050565b60008115159050919050565b61355d81613548565b82525050565b60006040820190506135786000830185613554565b613585602083018461351e565b9392505050565b61359581613514565b81146135a057600080fd5b50565b6000813590506135b28161358c565b92915050565b600080604083850312156135cf576135ce613484565b5b60006135dd858286016134d2565b92505060206135ee858286016135a3565b9150509250929050565b600060208201905061360d6000830184613554565b92915050565b61361c816134a9565b82525050565b600061016082019050613638600083018e613613565b613645602083018d61351e565b613652604083018c613554565b61365f606083018b613554565b61366c608083018a613554565b61367960a083018961351e565b61368660c083018861351e565b61369360e083018761351e565b6136a161010083018661351e565b6136af61012083018561351e565b6136bd61014083018461351e565b9c9b505050505050505050505050565b6000602082840312156136e3576136e2613484565b5b60006136f1848285016135a3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61372f816134a9565b82525050565b60006137418383613726565b60208301905092915050565b6000602082019050919050565b6000613765826136fa565b61376f8185613705565b935061377a83613716565b8060005b838110156137ab5781516137928882613735565b975061379d8361374d565b92505060018101905061377e565b5085935050505092915050565b600060208201905081810360008301526137d2818461375a565b905092915050565b60006020820190506137ef6000830184613613565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061385e82613514565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138905761388f613824565b5b600182019050919050565b600082825260208201905092915050565b7f4658443a20746f6b656e20616d6f756e742068617320746f206265206772656160008201527f746572207468616e203000000000000000000000000000000000000000000000602082015250565b6000613908602a8361389b565b9150613913826138ac565b604082019050919050565b60006020820190508181036000830152613937816138fb565b9050919050565b60006040820190506139536000830185613613565b613960602083018461351e565b9392505050565b7f4658443a207374616b657220646f6573206e6f74206578697374000000000000600082015250565b600061399d601a8361389b565b91506139a882613967565b602082019050919050565b600060208201905081810360008301526139cc81613990565b9050919050565b60006139de82613514565b91506139e983613514565b9250828201905080821115613a0157613a00613824565b5b92915050565b7f4658443a2063616e6e6f7420636c61696d206472697020796574000000000000600082015250565b6000613a3d601a8361389b565b9150613a4882613a07565b602082019050919050565b60006020820190508181036000830152613a6c81613a30565b9050919050565b7f4658443a206e6f74207374616b65640000000000000000000000000000000000600082015250565b6000613aa9600f8361389b565b9150613ab482613a73565b602082019050919050565b60006020820190508181036000830152613ad881613a9c565b9050919050565b613ae881613548565b8114613af357600080fd5b50565b600081519050613b0581613adf565b92915050565b600060208284031215613b2157613b20613484565b5b6000613b2f84828501613af6565b91505092915050565b7f546f6b656e207472616e73666572206661696c65642100000000000000000000600082015250565b6000613b6e60168361389b565b9150613b7982613b38565b602082019050919050565b60006020820190508181036000830152613b9d81613b61565b9050919050565b7f4658443a20707265636973696f6e2063616e6e6f742062652030000000000000600082015250565b6000613bda601a8361389b565b9150613be582613ba4565b602082019050919050565b60006020820190508181036000830152613c0981613bcd565b9050919050565b6000604082019050613c25600083018561351e565b613c32602083018461351e565b9392505050565b7f4658443a206d6178506f6f6c416d6f756e742063616e6e6f7420626520300000600082015250565b6000613c6f601e8361389b565b9150613c7a82613c39565b602082019050919050565b60006020820190508181036000830152613c9e81613c62565b9050919050565b7f4658443a206d6178506f6f6c416d6f756e742073686f756c642062652067726560008201527f61746572207468616e206d696e5374616b65416d6f756e740000000000000000602082015250565b6000613d0160388361389b565b9150613d0c82613ca5565b604082019050919050565b60006020820190508181036000830152613d3081613cf4565b9050919050565b7f4658443a206d6178506f6f6c416d6f756e742073686f756c642062652067726560008201527f61746572207468616e206d61785374616b65416d6f756e740000000000000000602082015250565b6000613d9360388361389b565b9150613d9e82613d37565b604082019050919050565b60006020820190508181036000830152613dc281613d86565b9050919050565b6000613dd482613514565b9150613ddf83613514565b9250828203905081811115613df757613df6613824565b5b92915050565b7f4658443a20696e20756e7374616b6520706572696f6400000000000000000000600082015250565b6000613e3360168361389b565b9150613e3e82613dfd565b602082019050919050565b60006020820190508181036000830152613e6281613e26565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4658443a20706c6561736520736574206d6178207374616b696e67206461797360008201527f20746f2062652067726561746572207468616e20300000000000000000000000602082015250565b6000613ef460358361389b565b9150613eff82613e98565b604082019050919050565b60006020820190508181036000830152613f2381613ee7565b9050919050565b7f4658443a20737461727454696d652063616e6e6f742062652030000000000000600082015250565b6000613f60601a8361389b565b9150613f6b82613f2a565b602082019050919050565b60006020820190508181036000830152613f8f81613f53565b9050919050565b7f4658443a20737461727454696d65206d75737420626520696e2074686520667560008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b6000613ff260248361389b565b9150613ffd82613f96565b604082019050919050565b6000602082019050818103600083015261402181613fe5565b9050919050565b600061403382613514565b915061403e83613514565b925082820261404c81613514565b9150828204841483151761406357614062613824565b5b5092915050565b7f4658443a207374616b65686f6c64657220646f6573206e6f7420657869737473600082015250565b60006140a060208361389b565b91506140ab8261406a565b602082019050919050565b600060208201905081810360008301526140cf81614093565b9050919050565b7f4658443a207374616b65686f6c646572207374696c6c20686173207374616b65600082015250565b600061410c60208361389b565b9150614117826140d6565b602082019050919050565b6000602082019050818103600083015261413b816140ff565b9050919050565b7f4658443a206e6f7420696e20756e7374616b6520706572696f64000000000000600082015250565b6000614178601a8361389b565b915061418382614142565b602082019050919050565b600060208201905081810360008301526141a78161416b565b9050919050565b7f4658443a206164647265737320686173206e6f74207374616b65640000000000600082015250565b60006141e4601b8361389b565b91506141ef826141ae565b602082019050919050565b60006020820190508181036000830152614213816141d7565b9050919050565b7f4658443a2078646320616d6f756e742068617320746f2062652067726561746560008201527f72207468616e2030000000000000000000000000000000000000000000000000602082015250565b600061427660288361389b565b91506142818261421a565b604082019050919050565b600060208201905081810360008301526142a581614269565b9050919050565b7f4658443a20616c7265616479207374616b656400000000000000000000000000600082015250565b60006142e260138361389b565b91506142ed826142ac565b602082019050919050565b60006020820190508181036000830152614311816142d5565b9050919050565b7f45786365656473206d6178696d756d20706f6f6c2076616c7565000000000000600082015250565b600061434e601a8361389b565b915061435982614318565b602082019050919050565b6000602082019050818103600083015261437d81614341565b9050919050565b7f4658443a20696e76616c696420616d6f756e7400000000000000000000000000600082015250565b60006143ba60138361389b565b91506143c582614384565b602082019050919050565b600060208201905081810360008301526143e9816143ad565b9050919050565b7f4658443a206e6f7420756e2d7374616b65640000000000000000000000000000600082015250565b600061442660128361389b565b9150614431826143f0565b602082019050919050565b6000602082019050818103600083015261445581614419565b9050919050565b7f4658443a2063616e6e6f74207769746864726177207965740000000000000000600082015250565b600061449260188361389b565b915061449d8261445c565b602082019050919050565b600060208201905081810360008301526144c181614485565b9050919050565b60006060820190506144dd6000830186613613565b6144ea602083018561351e565b6144f7604083018461351e565b949350505050565b7f4658443a206d61785374616b696e67446179732063616e6e6f74206265203000600082015250565b6000614535601f8361389b565b9150614540826144ff565b602082019050919050565b6000602082019050818103600083015261456481614528565b9050919050565b7f4658443a206d6178696d756d207374616b6520616d6f756e742073686f756c6460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b60006145c760328361389b565b91506145d28261456b565b604082019050919050565b600060208201905081810360008301526145f6816145ba565b9050919050565b7f4658443a206d696e696d756d207374616b6520616d6f756e742073686f756c6460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b600061465960328361389b565b9150614664826145fd565b604082019050919050565b600060208201905081810360008301526146888161464c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006146eb60268361389b565b91506146f68261468f565b604082019050919050565b6000602082019050818103600083015261471a816146de565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061475760208361389b565b915061476282614721565b602082019050919050565b600060208201905081810360008301526147868161474a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006060820190506147d16000830186613613565b6147de6020830185613613565b6147eb604083018461351e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061482d82613514565b915061483883613514565b925082614848576148476147f3565b5b828204905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006148af602a8361389b565b91506148ba82614853565b604082019050919050565b600060208201905081810360008301526148de816148a2565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061491b60148361389b565b9150614926826148e5565b602082019050919050565b6000602082019050818103600083015261494a8161490e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061498760108361389b565b915061499282614951565b602082019050919050565b600060208201905081810360008301526149b68161497a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614a1960268361389b565b9150614a24826149bd565b604082019050919050565b60006020820190508181036000830152614a4881614a0c565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015614a83578082015181840152602081019050614a68565b60008484015250505050565b6000614a9a82614a4f565b614aa48185614a5a565b9350614ab4818560208601614a65565b80840191505092915050565b6000614acc8284614a8f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614b0d601d8361389b565b9150614b1882614ad7565b602082019050919050565b60006020820190508181036000830152614b3c81614b00565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000614b6a82614b43565b614b74818561389b565b9350614b84818560208601614a65565b614b8d81614b4e565b840191505092915050565b60006020820190508181036000830152614bb28184614b5f565b90509291505056fea2646970667358221220ab135b52cf2252d7944225d82be05540eebed51e43a36a3830ca6d120a53c62f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102885760003560e01c8063817b1cd21161015c578063c392f766116100ce578063eb4af04511610087578063eb4af04514610736578063f014f96d14610752578063f188768414610782578063f2fde38b146107a0578063f33c7826146107bc578063f35dad40146107da57610288565b8063c392f76614610674578063c63410e414610692578063d02f0245146106b0578063dcc2a55e146106cc578063df156138146106e8578063e74d059f1461070657610288565b80639f37a0da116101205780639f37a0da146105c6578063a5ff3f80146105e4578063a694fc3a14610602578063acad41a41461061e578063b8f261e91461064e578063bed9d8611461066a57610288565b8063817b1cd21461055857806383197ef0146105765780638456cb59146105805780638da5cb5b1461058a57806399bc0aea146105a857610288565b80633f4ba83a11610200578063658b6729116101b9578063658b6729146104965780636ab9bba7146104b4578063715018a6146104e457806378e97925146104ee5780637e18627d1461050c5780637ef51bb91461053c57610288565b80633f4ba83a146103f85780634c1287e1146104025780635c975abb146104205780635d80ca321461043e5780635ed2b6821461045c578063601e77581461047857610288565b806316934fc41161025257806316934fc4146103445780631a8932391461037e5780632512f3cc1461039a5780632def6620146103b657806334fcf437146103c05780633e0a322d146103dc57610288565b80628cc2621461028d578062ca8af7146102bd57806306b091f9146102ee5780630ef5c03d1461030a5780631072cbea14610328575b600080fd5b6102a760048036038101906102a291906134e7565b6107f8565b6040516102b4919061352d565b60405180910390f35b6102d760048036038101906102d291906134e7565b61080a565b6040516102e5929190613563565b60405180910390f35b610308600480360381019061030391906135b8565b6108bc565b005b610312610991565b60405161031f91906135f8565b60405180910390f35b610342600480360381019061033d91906135b8565b610d2b565b005b61035e600480360381019061035991906134e7565b610e16565b6040516103759b9a99989796959493929190613622565b60405180910390f35b610398600480360381019061039391906136cd565b610eb7565b005b6103b460048036038101906103af91906136cd565b610f4f565b005b6103be6110cf565b005b6103da60048036038101906103d591906136cd565b611591565b005b6103f660048036038101906103f191906136cd565b6115e6565b005b610400611813565b005b61040a611825565b60405161041791906137b8565b60405180910390f35b6104286118b3565b60405161043591906135f8565b60405180910390f35b6104466118c9565b604051610453919061352d565b60405180910390f35b610476600480360381019061047191906136cd565b6118cf565b005b610480611924565b60405161048d919061352d565b60405180910390f35b61049e61192a565b6040516104ab919061352d565b60405180910390f35b6104ce60048036038101906104c991906134e7565b611937565b6040516104db91906135f8565b60405180910390f35b6104ec611b53565b005b6104f6611b67565b604051610503919061352d565b60405180910390f35b610526600480360381019061052191906134e7565b611b6d565b604051610533919061352d565b60405180910390f35b610556600480360381019061055191906135b8565b611c5c565b005b610560611d2b565b60405161056d919061352d565b60405180910390f35b61057e611d31565b005b610588611d59565b005b610592611d6b565b60405161059f91906137da565b60405180910390f35b6105b0611d94565b6040516105bd919061352d565b60405180910390f35b6105ce611d9a565b6040516105db919061352d565b60405180910390f35b6105ec611da0565b6040516105f9919061352d565b60405180910390f35b61061c600480360381019061061791906136cd565b611da6565b005b610638600480360381019061063391906136cd565b6122d9565b60405161064591906137da565b60405180910390f35b610668600480360381019061066391906136cd565b612318565b005b61067261236d565b005b61067c61278b565b604051610689919061352d565b60405180910390f35b61069a612791565b6040516106a7919061352d565b60405180910390f35b6106ca60048036038101906106c591906136cd565b612797565b005b6106e660048036038101906106e191906136cd565b61282f565b005b6106f06128c7565b6040516106fd919061352d565b60405180910390f35b610720600480360381019061071b91906134e7565b6128cd565b60405161072d91906135f8565b60405180910390f35b610750600480360381019061074b91906136cd565b6128ed565b005b61076c600480360381019061076791906134e7565b612985565b604051610779919061352d565b60405180910390f35b61078a612b29565b604051610797919061352d565b60405180910390f35b6107ba60048036038101906107b591906134e7565b612b2f565b005b6107c4612bb2565b6040516107d1919061352d565b60405180910390f35b6107e2612bb8565b6040516107ef919061352d565b60405180910390f35b600061080382612bbe565b9050919050565b60008060005b6013805490508110156108ae578373ffffffffffffffffffffffffffffffffffffffff1660138281548110610848576108476137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361089b5760018192509250506108b7565b80806108a690613853565b915050610810565b50600080915091505b915091565b6108c4612d98565b60008111610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe9061391e565b60405180910390fd5b6109548282600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612e169092919063ffffffff16565b7fc7373a0f64b3fe06c2144779575ea56ae879f4d815db065edd84fa72d744f128828260405161098592919061393e565b60405180910390a15050565b600061099b612e9c565b601160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a21906139b3565b60405180910390fd5b42600a54601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154610a7b91906139d3565b1115610abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab390613a53565b60405180910390fd5b6001151560116000610acc612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5090613abf565b60405180910390fd5b6000610b6b610b66612e9c565b612bbe565b90506000811115610c1f57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610bbc612e9c565b836040518363ffffffff1660e01b8152600401610bda92919061393e565b6020604051808303816000875af1158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190613b0b565b505b8060116000610c2c612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005016000828254610c7891906139d3565b925050819055504260116000610c8c612e9c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601819055508060096000828254610cdf91906139d3565b925050819055507f2d5429efdeca7741a8cd94067b18d988bc4e5f1d5b8272c37b7bfc31e9bfa32c610d0f612e9c565b82604051610d1e92919061393e565b60405180910390a1505090565b610d33612d98565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610d9092919061393e565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613b0b565b610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990613b84565b60405180910390fd5b5050565b60116020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff1690806003015490806004015490806005015490806006015490806007015490806008015490508b565b610ebf612d98565b60008111610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613bf0565b60405180910390fd5b60006010549050816010819055507f6c2a878920b0b43b70ba805d253b8ef45d63e2650fe183b92209f56d25faa07781601054604051610f43929190613c10565b60405180910390a15050565b610f57612d98565b60008111610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9190613c85565b60405180910390fd5b600554811015610fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd690613d17565b60405180910390fd5b600654811015611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90613da9565b60405180910390fd5b600081905081600e8190555080600e5411156110675761105c81600e5461104b9190613dc9565b600f54612ea490919063ffffffff16565b600f81905550611090565b611089600e54826110789190613dc9565b600f54612ea490919063ffffffff16565b600f819055505b7fd898486a6236f7d01b8c7202d7bdd86aed5338edb12cd160e26a6da5cf7b873581600e546040516110c3929190613c10565b60405180910390a15050565b60011515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90613abf565b60405180910390fd5b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff161515146111fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f290613e49565b60405180910390fd5b600061120633612bbe565b90506000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff1615151515815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509050428160c00181815250506000816040019015159081151581525050818161012001818152505060018160800190151590811515815250506113948160200151600454612ecb90919063ffffffff16565b6004819055506113b38160200151600f54612ea490919063ffffffff16565b6004819055506000806113c53361080a565b9150915081611409576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611400906139b3565b60405180910390fd5b6013600160138054905061141d9190613dc9565b8154811061142e5761142d6137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166013828154811061146d5761146c6137f5565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601360016013805490506114c99190613dc9565b815481106114da576114d96137f5565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055601380548061151957611518613e69565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590557f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7533846020015160405161158392919061393e565b60405180910390a150505050565b611599612d98565b60006008549050816008819055507f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f7186816008546040516115da929190613c10565b60405180910390a15050565b6115ee612d98565b6000600c5411611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a90613f0a565b60405180910390fd5b60008111611676576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166d90613f76565b60405180910390fd5b8042106116b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116af90614008565b60405180910390fd5b6000600b54905081600b819055507fbefe8e3983c0dc663c4ba451fc82d4ff7eb2e4ccc4b944874abea1ecc841feae81600b546040516116f9929190613c10565b60405180910390a1600d549050600254600c546117169190614028565b600b5461172391906139d3565b600d819055507fc1d34aeb4255f8133073ad43ad4f599a7cc710a56627c930558742338339864a81600d5460405161175c929190613c10565b60405180910390a160005b60138054905081101561180e57600b54601160006013848154811061178f5761178e6137f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060181905550808061180690613853565b915050611767565b505050565b61181b612d98565b611823612ef2565b565b606060138054806020026020016040519081016040528092919081815260200182805480156118a957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161185f575b5050505050905090565b60008060009054906101000a900460ff16905090565b60065481565b6118d7612d98565b6000600a54905081600a819055507f92f8949f7bd43d3df08f807422fbea26604df863fef0aca2d4d2270c87c85d7181600a54604051611918929190613c10565b60405180910390a15050565b60075481565b6000601380549050905090565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff166119c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bf906140b6565b60405180910390fd5b60001515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5590614122565b60405180910390fd5b60011515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb9061418e565b60405180910390fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015442611b449190613dc9565b90508060075410915050919050565b611b5b612d98565b611b656000612f54565b565b600b5481565b600060011515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfc906141fa565b60405180910390fd5b600a54601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154611c5591906139d3565b9050919050565b611c64612d98565b60008111611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e9061428c565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611ced573d6000803e3d6000fd5b507f7ee6aad23ecfe411c547b08941ceb6e03a997e50b9cc67875ec306fb5e6305c48282604051611d1f92919061393e565b60405180910390a15050565b60045481565b611d39612d98565b611d41611d6b565b73ffffffffffffffffffffffffffffffffffffffff16ff5b611d61612d98565b611d69613019565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600d5481565b600e5481565b600a5481565b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514611e3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e33906142f8565b60405180910390fd5b60001515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514611ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec990613e49565b60405180910390fd5b600e5481600454611ee391906139d3565b1115611f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1b90614364565b60405180910390fd5b600554811015611f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f60906143d0565b60405180910390fd5b600654811115611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa5906143d0565b60405180910390fd5b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff1615151515815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815250509050600181604001901515908115158152505060001515816060015115150361215557600181606001901515908115158152505033816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b6013339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160a001818152505060008160e00181815250506000600b5411156121ea57600b54816101000181815250506121f6565b42816101000181815250505b81816020018181525050818161014001818152505060008161012001818152505061222c82600454612ea490919063ffffffff16565b60048190555061224782600f54612ecb90919063ffffffff16565b600f8190555061229c333084600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661307b909392919063ffffffff16565b7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d33836040516122cd92919061393e565b60405180910390a15050565b601381815481106122e957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612320612d98565b60006007549050816007819055507fa16ca404a4d3ddb7408ea136a081abdee15b5fe9bc9983214f1f3b2eb5e62f5081600754604051612361929190613c10565b60405180910390a15050565b60011515601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160029054906101000a900460ff16151514612403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fa9061443c565b60405180910390fd5b61240c33611937565b61244b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612442906144a8565b60405180910390fd5b6000601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff161515151581526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481525050905060008160200151905060008261012001519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016125f792919061393e565b6020604051808303816000875af1158015612616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263a9190613b0b565b5060008111156126e657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016126a192919061393e565b6020604051808303816000875af11580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e49190613b0b565b505b60008360200181815250506000836101200181815250506000836080019015159081151581525050808360e00181815161272091906139d3565b915081815250504283610100018181525050806009600082825461274491906139d3565b925050819055507f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136733838360405161277e939291906144c8565b60405180910390a1505050565b60085481565b60105481565b61279f612d98565b600081116127e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d99061454b565b60405180910390fd5b6000600c54905081600c819055507fbefe8e3983c0dc663c4ba451fc82d4ff7eb2e4ccc4b944874abea1ecc841feae81600c54604051612823929190613c10565b60405180910390a15050565b612837612d98565b6000811161287a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612871906145dd565b60405180910390fd5b60006006549050816006819055507f7af071d76489ff69e32618f091b5d6de46af889de44f621a936e8c9615c463a9816006546040516128bb929190613c10565b60405180910390a15050565b600c5481565b60126020528060005260406000206000915054906101000a900460ff1681565b6128f5612d98565b60008111612938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292f9061466f565b60405180910390fd5b60006005549050816005819055507f3b8dcd7d08f8aa9e93d2afc54830c8b23db9b7264f3bc503eb5fc2a0289bc2cb81600554604051612979929190613c10565b60405180910390a15050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160019054906101000a900460ff16612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d906140b6565b60405180910390fd5b60001515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151514612aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa390614122565b60405180910390fd5b6000601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015442612afc9190613dc9565b9050806007541015612b12576000915050612b24565b80600754612b209190613dc9565b9150505b919050565b60055481565b612b37612d98565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9d90614701565b60405180910390fd5b612baf81612f54565b50565b600f5481565b60095481565b6000801515601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151503612c235760009050612d93565b6000600d54421115612c8657601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154600d54612c7f9190613dc9565b9050612cd7565b601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015442612cd49190613dc9565b90505b612d8f61016d612d816064612d73612cfc60105460085461310490919063ffffffff16565b612d65601160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612d576002548a61310490919063ffffffff16565b61311a90919063ffffffff16565b61311a90919063ffffffff16565b61310490919063ffffffff16565b61310490919063ffffffff16565b9150505b919050565b612da0612e9c565b73ffffffffffffffffffffffffffffffffffffffff16612dbe611d6b565b73ffffffffffffffffffffffffffffffffffffffff1614612e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0b9061476d565b60405180910390fd5b565b612e978363a9059cbb60e01b8484604051602401612e3592919061393e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061315c565b505050565b600033905090565b60008183612eb291906139d3565b905082811015612ec557612ec461478d565b5b92915050565b600082821115612ede57612edd61478d565b5b8183612eea9190613dc9565b905092915050565b612efa613224565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f3d612e9c565b604051612f4a91906137da565b60405180910390a1565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61302161326d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613064612e9c565b60405161307191906137da565b60405180910390a1565b6130fe846323b872dd60e01b85858560405160240161309c939291906147bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061315c565b50505050565b600081836131129190614822565b905092915050565b600080830361312c5760009050613156565b81836131389190614028565b90508183826131479190614822565b146131555761315461478d565b5b5b92915050565b60006131be826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132b79092919063ffffffff16565b90506000815114806131e05750808060200190518101906131df9190613b0b565b5b61321f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613216906148c5565b60405180910390fd5b505050565b61322c6118b3565b61326b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326290614931565b60405180910390fd5b565b6132756118b3565b156132b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ac9061499d565b60405180910390fd5b565b60606132c684846000856132cf565b90509392505050565b606082471015613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330b90614a2f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161333d9190614ac0565b60006040518083038185875af1925050503d806000811461337a576040519150601f19603f3d011682016040523d82523d6000602084013e61337f565b606091505b50915091506133908783838761339c565b92505050949350505050565b606083156133fe5760008351036133f6576133b685613411565b6133f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ec90614b23565b60405180910390fd5b5b829050613409565b6134088383613434565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156134475781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347b9190614b98565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134b482613489565b9050919050565b6134c4816134a9565b81146134cf57600080fd5b50565b6000813590506134e1816134bb565b92915050565b6000602082840312156134fd576134fc613484565b5b600061350b848285016134d2565b91505092915050565b6000819050919050565b61352781613514565b82525050565b6000602082019050613542600083018461351e565b92915050565b60008115159050919050565b61355d81613548565b82525050565b60006040820190506135786000830185613554565b613585602083018461351e565b9392505050565b61359581613514565b81146135a057600080fd5b50565b6000813590506135b28161358c565b92915050565b600080604083850312156135cf576135ce613484565b5b60006135dd858286016134d2565b92505060206135ee858286016135a3565b9150509250929050565b600060208201905061360d6000830184613554565b92915050565b61361c816134a9565b82525050565b600061016082019050613638600083018e613613565b613645602083018d61351e565b613652604083018c613554565b61365f606083018b613554565b61366c608083018a613554565b61367960a083018961351e565b61368660c083018861351e565b61369360e083018761351e565b6136a161010083018661351e565b6136af61012083018561351e565b6136bd61014083018461351e565b9c9b505050505050505050505050565b6000602082840312156136e3576136e2613484565b5b60006136f1848285016135a3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61372f816134a9565b82525050565b60006137418383613726565b60208301905092915050565b6000602082019050919050565b6000613765826136fa565b61376f8185613705565b935061377a83613716565b8060005b838110156137ab5781516137928882613735565b975061379d8361374d565b92505060018101905061377e565b5085935050505092915050565b600060208201905081810360008301526137d2818461375a565b905092915050565b60006020820190506137ef6000830184613613565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061385e82613514565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138905761388f613824565b5b600182019050919050565b600082825260208201905092915050565b7f4658443a20746f6b656e20616d6f756e742068617320746f206265206772656160008201527f746572207468616e203000000000000000000000000000000000000000000000602082015250565b6000613908602a8361389b565b9150613913826138ac565b604082019050919050565b60006020820190508181036000830152613937816138fb565b9050919050565b60006040820190506139536000830185613613565b613960602083018461351e565b9392505050565b7f4658443a207374616b657220646f6573206e6f74206578697374000000000000600082015250565b600061399d601a8361389b565b91506139a882613967565b602082019050919050565b600060208201905081810360008301526139cc81613990565b9050919050565b60006139de82613514565b91506139e983613514565b9250828201905080821115613a0157613a00613824565b5b92915050565b7f4658443a2063616e6e6f7420636c61696d206472697020796574000000000000600082015250565b6000613a3d601a8361389b565b9150613a4882613a07565b602082019050919050565b60006020820190508181036000830152613a6c81613a30565b9050919050565b7f4658443a206e6f74207374616b65640000000000000000000000000000000000600082015250565b6000613aa9600f8361389b565b9150613ab482613a73565b602082019050919050565b60006020820190508181036000830152613ad881613a9c565b9050919050565b613ae881613548565b8114613af357600080fd5b50565b600081519050613b0581613adf565b92915050565b600060208284031215613b2157613b20613484565b5b6000613b2f84828501613af6565b91505092915050565b7f546f6b656e207472616e73666572206661696c65642100000000000000000000600082015250565b6000613b6e60168361389b565b9150613b7982613b38565b602082019050919050565b60006020820190508181036000830152613b9d81613b61565b9050919050565b7f4658443a20707265636973696f6e2063616e6e6f742062652030000000000000600082015250565b6000613bda601a8361389b565b9150613be582613ba4565b602082019050919050565b60006020820190508181036000830152613c0981613bcd565b9050919050565b6000604082019050613c25600083018561351e565b613c32602083018461351e565b9392505050565b7f4658443a206d6178506f6f6c416d6f756e742063616e6e6f7420626520300000600082015250565b6000613c6f601e8361389b565b9150613c7a82613c39565b602082019050919050565b60006020820190508181036000830152613c9e81613c62565b9050919050565b7f4658443a206d6178506f6f6c416d6f756e742073686f756c642062652067726560008201527f61746572207468616e206d696e5374616b65416d6f756e740000000000000000602082015250565b6000613d0160388361389b565b9150613d0c82613ca5565b604082019050919050565b60006020820190508181036000830152613d3081613cf4565b9050919050565b7f4658443a206d6178506f6f6c416d6f756e742073686f756c642062652067726560008201527f61746572207468616e206d61785374616b65416d6f756e740000000000000000602082015250565b6000613d9360388361389b565b9150613d9e82613d37565b604082019050919050565b60006020820190508181036000830152613dc281613d86565b9050919050565b6000613dd482613514565b9150613ddf83613514565b9250828203905081811115613df757613df6613824565b5b92915050565b7f4658443a20696e20756e7374616b6520706572696f6400000000000000000000600082015250565b6000613e3360168361389b565b9150613e3e82613dfd565b602082019050919050565b60006020820190508181036000830152613e6281613e26565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4658443a20706c6561736520736574206d6178207374616b696e67206461797360008201527f20746f2062652067726561746572207468616e20300000000000000000000000602082015250565b6000613ef460358361389b565b9150613eff82613e98565b604082019050919050565b60006020820190508181036000830152613f2381613ee7565b9050919050565b7f4658443a20737461727454696d652063616e6e6f742062652030000000000000600082015250565b6000613f60601a8361389b565b9150613f6b82613f2a565b602082019050919050565b60006020820190508181036000830152613f8f81613f53565b9050919050565b7f4658443a20737461727454696d65206d75737420626520696e2074686520667560008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b6000613ff260248361389b565b9150613ffd82613f96565b604082019050919050565b6000602082019050818103600083015261402181613fe5565b9050919050565b600061403382613514565b915061403e83613514565b925082820261404c81613514565b9150828204841483151761406357614062613824565b5b5092915050565b7f4658443a207374616b65686f6c64657220646f6573206e6f7420657869737473600082015250565b60006140a060208361389b565b91506140ab8261406a565b602082019050919050565b600060208201905081810360008301526140cf81614093565b9050919050565b7f4658443a207374616b65686f6c646572207374696c6c20686173207374616b65600082015250565b600061410c60208361389b565b9150614117826140d6565b602082019050919050565b6000602082019050818103600083015261413b816140ff565b9050919050565b7f4658443a206e6f7420696e20756e7374616b6520706572696f64000000000000600082015250565b6000614178601a8361389b565b915061418382614142565b602082019050919050565b600060208201905081810360008301526141a78161416b565b9050919050565b7f4658443a206164647265737320686173206e6f74207374616b65640000000000600082015250565b60006141e4601b8361389b565b91506141ef826141ae565b602082019050919050565b60006020820190508181036000830152614213816141d7565b9050919050565b7f4658443a2078646320616d6f756e742068617320746f2062652067726561746560008201527f72207468616e2030000000000000000000000000000000000000000000000000602082015250565b600061427660288361389b565b91506142818261421a565b604082019050919050565b600060208201905081810360008301526142a581614269565b9050919050565b7f4658443a20616c7265616479207374616b656400000000000000000000000000600082015250565b60006142e260138361389b565b91506142ed826142ac565b602082019050919050565b60006020820190508181036000830152614311816142d5565b9050919050565b7f45786365656473206d6178696d756d20706f6f6c2076616c7565000000000000600082015250565b600061434e601a8361389b565b915061435982614318565b602082019050919050565b6000602082019050818103600083015261437d81614341565b9050919050565b7f4658443a20696e76616c696420616d6f756e7400000000000000000000000000600082015250565b60006143ba60138361389b565b91506143c582614384565b602082019050919050565b600060208201905081810360008301526143e9816143ad565b9050919050565b7f4658443a206e6f7420756e2d7374616b65640000000000000000000000000000600082015250565b600061442660128361389b565b9150614431826143f0565b602082019050919050565b6000602082019050818103600083015261445581614419565b9050919050565b7f4658443a2063616e6e6f74207769746864726177207965740000000000000000600082015250565b600061449260188361389b565b915061449d8261445c565b602082019050919050565b600060208201905081810360008301526144c181614485565b9050919050565b60006060820190506144dd6000830186613613565b6144ea602083018561351e565b6144f7604083018461351e565b949350505050565b7f4658443a206d61785374616b696e67446179732063616e6e6f74206265203000600082015250565b6000614535601f8361389b565b9150614540826144ff565b602082019050919050565b6000602082019050818103600083015261456481614528565b9050919050565b7f4658443a206d6178696d756d207374616b6520616d6f756e742073686f756c6460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b60006145c760328361389b565b91506145d28261456b565b604082019050919050565b600060208201905081810360008301526145f6816145ba565b9050919050565b7f4658443a206d696e696d756d207374616b6520616d6f756e742073686f756c6460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b600061465960328361389b565b9150614664826145fd565b604082019050919050565b600060208201905081810360008301526146888161464c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006146eb60268361389b565b91506146f68261468f565b604082019050919050565b6000602082019050818103600083015261471a816146de565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061475760208361389b565b915061476282614721565b602082019050919050565b600060208201905081810360008301526147868161474a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60006060820190506147d16000830186613613565b6147de6020830185613613565b6147eb604083018461351e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061482d82613514565b915061483883613514565b925082614848576148476147f3565b5b828204905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006148af602a8361389b565b91506148ba82614853565b604082019050919050565b600060208201905081810360008301526148de816148a2565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b600061491b60148361389b565b9150614926826148e5565b602082019050919050565b6000602082019050818103600083015261494a8161490e565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061498760108361389b565b915061499282614951565b602082019050919050565b600060208201905081810360008301526149b68161497a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614a1960268361389b565b9150614a24826149bd565b604082019050919050565b60006020820190508181036000830152614a4881614a0c565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015614a83578082015181840152602081019050614a68565b60008484015250505050565b6000614a9a82614a4f565b614aa48185614a5a565b9350614ab4818560208601614a65565b80840191505092915050565b6000614acc8284614a8f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614b0d601d8361389b565b9150614b1882614ad7565b602082019050919050565b60006020820190508181036000830152614b3c81614b00565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000614b6a82614b43565b614b74818561389b565b9350614b84818560208601614a65565b614b8d81614b4e565b840191505092915050565b60006020820190508181036000830152614bb28184614b5f565b90509291505056fea2646970667358221220ab135b52cf2252d7944225d82be05540eebed51e43a36a3830ca6d120a53c62f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1269,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "ONE_DAY",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1272,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)363"
      },
      {
        "astId": 1274,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1281,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1288,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "maxStakeAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1293,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "coolOff",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1295,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "interest",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1298,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "totalRedeemed",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1303,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "redeemInterval",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1305,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "startTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1307,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "maxStakingDays",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1309,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "expiryTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1316,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "maxPoolAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1319,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "pendingPoolAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1322,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "interestPrecision",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1448,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "stakes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Stake)1443_storage)"
      },
      {
        "astId": 1452,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "addressStaked",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1455,
        "contract": "contracts/StakeFXD.sol:StakeFXD",
        "label": "stakeHolders",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)363": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Stake)1443_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakeFXD.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1443_storage"
      },
      "t_struct(Stake)1443_storage": {
        "encoding": "inplace",
        "label": "struct StakeFXD.Stake",
        "members": [
          {
            "astId": 1422,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "stakerHolder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1424,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1426,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "staked",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1428,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "exists",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1430,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "unstaked",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1432,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "stakedTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1434,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "unstakedTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1436,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "totalRedeemed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1438,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "lastRedeemedAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1440,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "balance",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1442,
            "contract": "contracts/StakeFXD.sol:StakeFXD",
            "label": "originalStakeAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}