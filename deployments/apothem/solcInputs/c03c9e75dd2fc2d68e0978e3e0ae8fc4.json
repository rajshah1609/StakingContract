{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/StakeFXD.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param _addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract StakeFXD is Pausable, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using AddressUtils for address;\r\n\r\n    uint256 private ONE_DAY = 60; //86400\r\n\r\n    IERC20 token;\r\n    uint256 public totalStaked;\r\n    uint256 public minStakeAmount = 100 * 10 ** 18;\r\n    uint256 public maxStakeAmount = 1000 * 10 ** 18;\r\n    uint256 public coolOff = ONE_DAY * 7;\r\n    uint256 public interest;\r\n    uint256 public totalRedeemed = 0;\r\n    uint256 public redeemInterval = 10 * ONE_DAY;\r\n    uint256 public startTime;\r\n    uint256 public maxStakingDays;\r\n    uint256 public expiryTime;\r\n    uint256 public maxPoolAmount = 10000 * 10 ** 18; //greater than or equal to maxstakeamount\r\n    uint256 public pendingPoolAmount = maxPoolAmount;\r\n\r\n    uint256 public interestPrecision = 100;\r\n\r\n    event Staked(address staker, uint256 amount);\r\n\r\n    event Unstaked(address staker, uint256 amount);\r\n    event WithdrewStake(address staker, uint256 principal, uint256 earnings);\r\n    event ClaimedRewards(address staker, uint256 amount);\r\n\r\n    // Parameter Change Events\r\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\r\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\r\n    event RateChanged(uint256 prevValue, uint256 newValue);\r\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\r\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\r\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\r\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\r\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\r\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\r\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\r\n\r\n    event WithdrewTokens(address beneficiary, uint256 amount);\r\n    event WithdrewXdc(address beneficiary, uint256 amount);\r\n\r\n    struct Stake {\r\n        address stakerHolder;\r\n        uint256 stakedAmount;\r\n        bool staked;\r\n        bool exists;\r\n        bool unstaked;\r\n        uint256 stakedTime;\r\n        uint256 unstakedTime;\r\n        uint256 totalRedeemed;\r\n        uint256 lastRedeemedAt;\r\n        uint256 balance;\r\n        uint256 originalStakeAmount;\r\n    }\r\n\r\n    mapping(address => Stake) public stakes;\r\n    mapping(address => bool) public addressStaked;\r\n    address[] public stakeHolders;\r\n\r\n    modifier whenStaked() {\r\n        require(stakes[msg.sender].staked == true, \"FXD: not staked\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotStaked() {\r\n        require(stakes[msg.sender].staked == false, \"FXD: already staked\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotUnStaked() {\r\n        require(stakes[msg.sender].unstaked == false, \"FXD: in unstake period\");\r\n        _;\r\n    }\r\n\r\n    modifier whenUnStaked() {\r\n        require(stakes[msg.sender].unstaked == true, \"FXD: not un-staked\");\r\n        _;\r\n    }\r\n\r\n    modifier canRedeemDrip(address staker) {\r\n        require(stakes[staker].exists, \"FXD: staker does not exist\");\r\n        require(\r\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\r\n            \"FXD: cannot claim drip yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function canWithdrawStake(address staker) public view returns (bool) {\r\n        require(stakes[staker].exists, \"FXD: stakeholder does not exists\");\r\n        require(\r\n            stakes[staker].staked == false,\r\n            \"FXD: stakeholder still has stake\"\r\n        );\r\n        require(stakes[staker].unstaked == true, \"FXD: not in unstake period\");\r\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\r\n        return coolOff < unstakeTenure;\r\n    }\r\n\r\n    constructor(IERC20 token_, uint256 interest_) {\r\n        require(\r\n            address(token_) != address(0),\r\n            \"Token Address cannot be address 0\"\r\n        );\r\n        token = token_;\r\n        interest = interest_;\r\n    }\r\n\r\n    function transferToken(address to, uint256 amount) external onlyOwner {\r\n        require(token.transfer(to, amount), \"Token transfer failed!\");\r\n    }\r\n\r\n    function stake(uint256 amount_) public whenNotStaked whenNotUnStaked {\r\n        require(\r\n            totalStaked + amount_ <= maxPoolAmount,\r\n            \"Exceeds maximum pool value\"\r\n        );\r\n        require(amount_ >= minStakeAmount, \"FXD: invalid amount\");\r\n        require(amount_ <= maxStakeAmount, \"FXD: invalid amount\");\r\n\r\n        Stake memory staker = stakes[msg.sender];\r\n\r\n        staker.staked = true;\r\n        if (staker.exists == false) {\r\n            staker.exists = true;\r\n            staker.stakerHolder = msg.sender;\r\n        }\r\n\r\n        stakeHolders.push(msg.sender);\r\n        staker.stakedTime = block.timestamp;\r\n        staker.totalRedeemed = 0;\r\n        if (startTime > 0) staker.lastRedeemedAt = startTime;\r\n        else staker.lastRedeemedAt = block.timestamp;\r\n        staker.stakedAmount = amount_;\r\n        staker.originalStakeAmount = amount_;\r\n        staker.balance = 0;\r\n\r\n        totalStaked = totalStaked.add(amount_);\r\n        pendingPoolAmount = pendingPoolAmount.sub(amount_);\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), amount_);\r\n\r\n        emit Staked(msg.sender, amount_);\r\n    }\r\n\r\n    function unstake() public whenStaked whenNotUnStaked {\r\n        uint256 leftoverBalance = _earned(msg.sender);\r\n        Stake memory staker = stakes[msg.sender];\r\n        staker.unstakedTime = block.timestamp;\r\n        staker.staked = false;\r\n        staker.balance = leftoverBalance;\r\n        staker.unstaked = true;\r\n\r\n        totalStaked = totalStaked.sub(staker.stakedAmount);\r\n        totalStaked = pendingPoolAmount.add(staker.stakedAmount);\r\n        (bool exists, uint256 stakerIndex) = getStakerIndex(msg.sender);\r\n        require(exists, \"FXD: staker does not exist\");\r\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\r\n        delete stakeHolders[stakeHolders.length - 1];\r\n        stakeHolders.pop();\r\n\r\n        emit Unstaked(msg.sender, staker.stakedAmount);\r\n    }\r\n\r\n    function _earned(\r\n        address beneficiary_\r\n    ) internal view returns (uint256 earned) {\r\n        if (stakes[beneficiary_].staked == false) return 0;\r\n        uint256 tenure;\r\n        if (block.timestamp > expiryTime)\r\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\r\n        else tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\r\n        earned = tenure\r\n            .div(ONE_DAY)\r\n            .mul(stakes[beneficiary_].stakedAmount)\r\n            .mul(interest.div(interestPrecision))\r\n            .div(100)\r\n            .div(365);\r\n    }\r\n\r\n    function claimEarned() public canRedeemDrip(_msgSender()) returns (bool) {\r\n        require(stakes[_msgSender()].staked == true, \"FXD: not staked\");\r\n\r\n        // update the redeemdate even if earnings are 0\r\n        uint256 earnings = _earned(_msgSender());\r\n\r\n        if (earnings > 0) {\r\n            token.transfer(_msgSender(), earnings);\r\n        }\r\n\r\n        stakes[_msgSender()].totalRedeemed += earnings;\r\n        stakes[_msgSender()].lastRedeemedAt = block.timestamp;\r\n\r\n        totalRedeemed += earnings;\r\n\r\n        emit ClaimedRewards(_msgSender(), earnings);\r\n    }\r\n\r\n    function withdrawStake() public whenUnStaked {\r\n        require(canWithdrawStake(msg.sender), \"FXD: cannot withdraw yet\");\r\n        Stake memory staker = stakes[msg.sender];\r\n        uint256 withdrawAmount = staker.stakedAmount;\r\n        uint256 leftoverBalance = staker.balance;\r\n        token.transfer(msg.sender, withdrawAmount);\r\n        if (leftoverBalance > 0) token.transfer(msg.sender, leftoverBalance);\r\n        staker.stakedAmount = 0;\r\n        staker.balance = 0;\r\n        staker.unstaked = false;\r\n        staker.totalRedeemed += leftoverBalance;\r\n        staker.lastRedeemedAt = block.timestamp;\r\n        totalRedeemed += leftoverBalance;\r\n        emit WithdrewStake(msg.sender, withdrawAmount, leftoverBalance);\r\n    }\r\n\r\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\r\n        require(\r\n            stakes[claimerAddress].staked == true,\r\n            \"FXD: address has not staked\"\r\n        );\r\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\r\n    }\r\n\r\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\r\n        require(stakes[staker].exists, \"FXD: stakeholder does not exists\");\r\n        require(\r\n            stakes[staker].staked == false,\r\n            \"FXD: stakeholder still has stake\"\r\n        );\r\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\r\n        if (coolOff < unstakeTenure) return 0;\r\n        return coolOff - unstakeTenure;\r\n    }\r\n\r\n    function getAllStakeHolder() public view returns (address[] memory) {\r\n        return stakeHolders;\r\n    }\r\n\r\n    function getStakerIndex(\r\n        address staker\r\n    ) public view returns (bool, uint256) {\r\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\r\n            if (stakeHolders[i] == staker) return (true, i);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function earned(address staker) public view returns (uint256 earnings) {\r\n        earnings = _earned(staker);\r\n    }\r\n\r\n    function getNumberOfStakers() public view returns (uint256 numberofStaker) {\r\n        return stakeHolders.length;\r\n    }\r\n\r\n    /*\r\n        Owner Functionality Starts\r\n    */\r\n\r\n    function setMinStakeAmount(uint256 minStakeAmount_) public onlyOwner {\r\n        require(\r\n            minStakeAmount_ > 0,\r\n            \"FXD: minimum stake amount should be greater than 0\"\r\n        );\r\n        uint256 prevValue = minStakeAmount;\r\n        minStakeAmount = minStakeAmount_;\r\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\r\n    }\r\n\r\n    function setMaxStakeAmount(uint256 maxStakeAmount_) public onlyOwner {\r\n        require(\r\n            maxStakeAmount_ > 0,\r\n            \"FXD: maximum stake amount should be greater than 0\"\r\n        );\r\n        uint256 prevValue = maxStakeAmount;\r\n        maxStakeAmount = maxStakeAmount_;\r\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\r\n    }\r\n\r\n    function setRate(uint256 interest_) public onlyOwner {\r\n        uint256 prevValue = interest;\r\n        interest = interest_;\r\n        emit RateChanged(prevValue, interest);\r\n    }\r\n\r\n    function setCoolOff(uint256 coolOff_) public onlyOwner {\r\n        uint256 prevValue = coolOff;\r\n        coolOff = coolOff_;\r\n        emit CoolOffChanged(prevValue, coolOff);\r\n    }\r\n\r\n    function setRedeemInterval(uint256 redeemInterval_) public onlyOwner {\r\n        uint256 prevValue = redeemInterval;\r\n        redeemInterval = redeemInterval_;\r\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\r\n    }\r\n\r\n    function setInterestPrecision(uint256 interestPrecision_) public onlyOwner {\r\n        require(interestPrecision_ > 0, \"FXD: precision cannot be 0\");\r\n        uint256 prevValue = interestPrecision;\r\n        interestPrecision = interestPrecision_;\r\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\r\n    }\r\n\r\n    function setStartTime(uint256 startTime_) public onlyOwner {\r\n        require(\r\n            maxStakingDays > 0,\r\n            \"FXD: please set max staking days to be greater than 0\"\r\n        );\r\n        require(startTime_ > 0, \"FXD: startTime cannot be 0\");\r\n        require(\r\n            block.timestamp < startTime_,\r\n            \"FXD: startTime must be in the future\"\r\n        );\r\n        uint256 prevValue = startTime;\r\n        startTime = startTime_;\r\n        emit StartTimeChanged(prevValue, startTime);\r\n        prevValue = expiryTime;\r\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\r\n        emit ExpiryTimeChanged(prevValue, expiryTime);\r\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\r\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\r\n        }\r\n    }\r\n\r\n    function setMaxStakingDays(uint256 maxStakingDays_) public onlyOwner {\r\n        require(maxStakingDays_ > 0, \"FXD: maxStakingDays cannot be 0\");\r\n        uint256 prevValue = maxStakingDays;\r\n        maxStakingDays = maxStakingDays_;\r\n        emit StartTimeChanged(prevValue, maxStakingDays);\r\n    }\r\n\r\n    function setMaxPoolAmount(uint256 maxPoolAmount_) public onlyOwner {\r\n        require(maxPoolAmount_ > 0, \"FXD: maxPoolAmount cannot be 0\");\r\n        require(\r\n            maxPoolAmount_ >= minStakeAmount,\r\n            \"FXD: maxPoolAmount should be greater than minStakeAmount\"\r\n        );\r\n        require(\r\n            maxPoolAmount_ >= maxStakeAmount,\r\n            \"FXD: maxPoolAmount should be greater than maxStakeAmount\"\r\n        );\r\n        uint256 prevValue = maxPoolAmount_;\r\n        maxPoolAmount = maxPoolAmount_;\r\n        if (maxPoolAmount > prevValue)\r\n            pendingPoolAmount = pendingPoolAmount.add(\r\n                maxPoolAmount - prevValue\r\n            );\r\n        else\r\n            pendingPoolAmount = pendingPoolAmount.add(\r\n                prevValue - maxPoolAmount\r\n            );\r\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address beneficiary_,\r\n        uint256 amount_\r\n    ) public onlyOwner {\r\n        require(amount_ > 0, \"FXD: token amount has to be greater than 0\");\r\n        token.safeTransfer(beneficiary_, amount_);\r\n        emit WithdrewTokens(beneficiary_, amount_);\r\n    }\r\n\r\n    function withdrawXdc(\r\n        address beneficiary_,\r\n        uint256 amount_\r\n    ) public onlyOwner {\r\n        require(amount_ > 0, \"FXD: xdc amount has to be greater than 0\");\r\n        payable(beneficiary_).transfer(amount_);\r\n        emit WithdrewXdc(beneficiary_, amount_);\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(payable(owner()));\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}