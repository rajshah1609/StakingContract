{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/ITokenStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ITokenStaking {\n    // Structs\n    struct Stake {\n        uint256 stakedAmount;\n        bool staked;\n        bool exists;\n        bool unstaked;\n        uint256 stakedTime;\n        uint256 unstakedTime;\n        uint256 totalRedeemed;\n        uint256 lastRedeemedAt;\n        uint256 balance;\n        uint256 originalStakeAmount;\n    }\n\n    // View Functions - State Variables\n    function stakingToken() external view returns (address);\n    function tokenDecimals() external view returns (uint256);\n    function tokenSymbol() external view returns (string memory);\n    function poolName() external view returns (string memory);\n    function paused() external view returns (bool);\n    function totalStaked() external view returns (uint256);\n    function minStakeAmount() external view returns (uint256);\n    function maxStakeAmount() external view returns (uint256);\n    function coolOff() external view returns (uint256);\n    function interest() external view returns (uint256);\n    function totalRedeemed() external view returns (uint256);\n    function redeemInterval() external view returns (uint256);\n    function maxPoolAmount() external view returns (uint256);\n    function pendingPoolAmount() external view returns (uint256);\n    function interestPrecision() external view returns (uint256);\n    function startTime() external view returns (uint256);\n    function maxStakingDays() external view returns (uint256);\n    function expiryTime() external view returns (uint256);\n\n    // View Functions - Mappings & Arrays\n    function stakes(address staker) external view returns (\n        uint256 stakedAmount,\n        bool staked,\n        bool exists,\n        bool unstaked,\n        uint256 stakedTime,\n        uint256 unstakedTime,\n        uint256 totalRedeemed,\n        uint256 lastRedeemedAt,\n        uint256 balance,\n        uint256 originalStakeAmount\n    );\n    function stakeHolders(uint256 index) external view returns (address);\n\n    // View Functions - Helper Methods\n    function canWithdrawStake(address staker) external view returns (bool);\n    function earned(address staker) external view returns (uint256);\n    function getStakerIndex(address staker) external view returns (bool exists, uint256 index);\n    function getAllStakeHolders() external view returns (address[] memory);\n    function getNumberOfStakers() external view returns (uint256);\n    function nextDripAt(address claimerAddress) external view returns (uint256);\n    function canWithdrawStakeIn(address staker) external view returns (uint256);\n\n    // State-Changing Functions - User Actions\n    function initialize(\n        uint256 minStakeAmount_,\n        uint256 maxStakeAmount_,\n        uint256 coolOff_,\n        uint256 redeemInterval_,\n        uint256 maxPoolAmount_,\n        uint256 interestPrecision_\n    ) external;\n    function stake(uint256 amount_) external;\n    function unstake() external;\n    function claimEarned(address claimAddress) external;\n    function withdrawStake() external;\n\n    // State-Changing Functions - Owner Actions\n    function setMinStakeAmount(uint256 minStakeAmount_) external;\n    function setMaxStakeAmount(uint256 maxStakeAmount_) external;\n    function setRate(uint256 interest_) external;\n    function setCoolOff(uint256 coolOff_) external;\n    function setRedeemInterval(uint256 redeemInterval_) external;\n    function setStartTime(uint256 startTime_) external;\n    function setMaxStakingDays(uint256 maxStakingDays_) external;\n    function setMaxPoolAmount(uint256 maxPoolAmount_) external;\n    function setInterestPrecision(uint256 interestPrecision_) external;\n    function withdrawTokens(address beneficiary_, uint256 amount_) external;\n    function pause() external;\n    function unpause() external;\n    function transferOwnership(address newOwner) external;\n    function renounceOwnership() external;\n\n} "
    },
    "contracts/StakeFXD.sol": {
      "content": "// File: @openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/security/Pausable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: StakeFXD.sol\n\n\n\npragma solidity ^0.8.17;\n\n\n\n\n\n\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\nlibrary AddressUtils {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param _addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n}\n\ncontract StakeFXD is Context, Pausable, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using AddressUtils for address;\n\n    uint256 private ONE_DAY = 86400; //86400\n\n    IERC20 token;\n    uint256 public decimals;\n    uint256 public totalStaked;\n    uint256 public minStakeAmount = 5000;\n    uint256 public maxStakeAmount = 25000;\n    uint256 public coolOff = ONE_DAY * 7;\n    uint256 public interest;\n    uint256 public totalRedeemed = 0;\n    uint256 public redeemInterval = 30 * ONE_DAY;\n    uint256 public startTime;\n    uint256 public maxStakingDays;\n    uint256 public expiryTime;\n    uint256 public maxPoolAmount = 200000; //greater than or equal to maxstakeamount\n    uint256 public pendingPoolAmount = maxPoolAmount;\n    uint256 public interestPrecision = 100;\n\n    constructor(IERC20 token_, uint256 interest_, uint256 decimals_) {\n        require(\n            address(token_) != address(0),\n            \"Token Address cannot be address 0\"\n        );\n        token = token_;\n        interest = interest_;\n        decimals = decimals_;\n        minStakeAmount = minStakeAmount * 10 ** decimals;\n        maxStakeAmount = maxStakeAmount * 10 ** decimals;\n        maxPoolAmount = maxPoolAmount * 10 ** decimals;\n        pendingPoolAmount = maxPoolAmount;\n    }\n\n    event Staked(address staker, uint256 amount);\n\n    event Unstaked(address staker, uint256 amount);\n    event WithdrewStake(address staker, uint256 principal, uint256 earnings);\n    event ClaimedRewards(address staker, uint256 amount);\n\n    // Parameter Change Events\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event RateChanged(uint256 prevValue, uint256 newValue);\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\n\n    event WithdrewTokens(address beneficiary, uint256 amount);\n    event WithdrewXdc(address beneficiary, uint256 amount);\n\n    struct Stake {\n        address stakerHolder;\n        uint256 stakedAmount;\n        bool staked;\n        bool exists;\n        bool unstaked;\n        uint256 stakedTime;\n        uint256 unstakedTime;\n        uint256 totalRedeemed;\n        uint256 lastRedeemedAt;\n        uint256 balance;\n        uint256 originalStakeAmount;\n    }\n\n    mapping(address => Stake) public stakes;\n    mapping(address => bool) public addressStaked;\n    address[] public stakeHolders;\n\n    modifier whenStaked() {\n        require(stakes[_msgSender()].staked == true, \"FXD: not staked\");\n        _;\n    }\n\n    modifier whenNotStaked() {\n        require(stakes[_msgSender()].staked == false, \"FXD: already staked\");\n        _;\n    }\n\n    modifier whenNotUnStaked() {\n        require(\n            stakes[_msgSender()].unstaked == false,\n            \"FXD: in unstake period\"\n        );\n        _;\n    }\n\n    modifier whenUnStaked() {\n        require(stakes[_msgSender()].unstaked == true, \"FXD: not un-staked\");\n        _;\n    }\n\n    modifier canRedeemDrip(address staker) {\n        require(stakes[staker].exists, \"FXD: staker does not exist\");\n        require(\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\n            \"FXD: cannot claim drip yet\"\n        );\n        _;\n    }\n\n     modifier whenNotExpired() {\n        require(block.timestamp < expiryTime, \"Staking expired cannot stake now\");\n        _;\n    }\n\n    function canWithdrawStake(address staker) public view returns (bool) {\n        require(stakes[staker].exists, \"FXD: stakeholder does not exists\");\n        require(\n            stakes[staker].staked == false,\n            \"FXD: stakeholder still has stake\"\n        );\n        require(stakes[staker].unstaked == true, \"FXD: not in unstake period\");\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        return coolOff < unstakeTenure;\n    }\n\n    function transferToken(address to, uint256 amount) external onlyOwner {\n        require(token.transfer(to, amount), \"Token transfer failed!\");\n    }\n\n    function stake(\n        uint256 amount_\n    ) external whenNotStaked whenNotUnStaked whenNotExpired nonReentrant {\n        require(\n            totalStaked + amount_ <= maxPoolAmount,\n            \"Exceeds maximum pool value\"\n        );\n        require(amount_ >= minStakeAmount, \"FXD: invalid amount\");\n        require(amount_ <= maxStakeAmount, \"FXD: invalid amount\");\n\n        Stake memory staker = stakes[_msgSender()];\n\n        staker.staked = true;\n        if (staker.exists == false) {\n            staker.exists = true;\n            staker.stakerHolder = _msgSender();\n        }\n\n        stakeHolders.push(_msgSender());\n        staker.stakedTime = block.timestamp;\n        staker.totalRedeemed = 0;\n        if (startTime > 0) staker.lastRedeemedAt = startTime;\n        else staker.lastRedeemedAt = block.timestamp;\n        staker.stakedAmount = amount_;\n        staker.originalStakeAmount = amount_;\n        staker.balance = 0;\n        stakes[_msgSender()] = staker;\n\n        totalStaked = totalStaked.add(amount_);\n        pendingPoolAmount = pendingPoolAmount.sub(amount_);\n\n        token.safeTransferFrom(_msgSender(), address(this), amount_);\n\n        emit Staked(_msgSender(), amount_);\n    }\n\n    function unstake() external whenStaked whenNotUnStaked nonReentrant {\n        require(expiryTime <= block.timestamp, \"FXD: contract hasn't expired yet\");\n        uint256 leftoverBalance = _earned(_msgSender());\n        Stake memory staker = stakes[_msgSender()];\n        staker.unstakedTime = block.timestamp;\n        staker.staked = false;\n        staker.balance = leftoverBalance;\n        staker.unstaked = true;\n        stakes[_msgSender()] = staker;\n\n        totalStaked = totalStaked.sub(staker.stakedAmount);\n        pendingPoolAmount = pendingPoolAmount.add(staker.stakedAmount);\n        (bool exists, uint256 stakerIndex) = getStakerIndex(_msgSender());\n        require(exists, \"FXD: staker does not exist\");\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\n        delete stakeHolders[stakeHolders.length - 1];\n        stakeHolders.pop();\n\n        emit Unstaked(_msgSender(), staker.stakedAmount);\n    }\n\n    function _earned(\n        address beneficiary_\n    ) internal view returns (uint256 earned) {\n        if (stakes[beneficiary_].staked == false) return 0;\n        uint256 tenure;\n        if (block.timestamp > expiryTime)\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\n        else tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\n        earned = tenure\n            .div(ONE_DAY)\n            .mul(stakes[beneficiary_].stakedAmount)\n            .mul(interest.div(interestPrecision))\n            .div(100)\n            .div(365);\n    }\n\n    function claimEarned(\n        address claimAddress\n    ) public canRedeemDrip(claimAddress) nonReentrant {\n        require(stakes[claimAddress].staked == true, \"FXD: not staked\");\n\n        // update the redeemdate even if earnings are 0\n        uint256 earnings = _earned(claimAddress);\n\n        if (earnings > 0) {\n            token.transfer(claimAddress, earnings);\n        }\n\n        stakes[claimAddress].totalRedeemed += earnings;\n        stakes[claimAddress].lastRedeemedAt = block.timestamp;\n\n        totalRedeemed += earnings;\n\n        emit ClaimedRewards(claimAddress, earnings);\n    }\n\n    function withdrawStake() public whenUnStaked {\n        require(canWithdrawStake(_msgSender()), \"FXD: cannot withdraw yet\");\n        Stake memory staker = stakes[_msgSender()];\n        uint256 withdrawAmount = staker.stakedAmount;\n        uint256 leftoverBalance = staker.balance;\n        token.transfer(_msgSender(), withdrawAmount);\n        if (leftoverBalance > 0) token.transfer(_msgSender(), leftoverBalance);\n        staker.stakedAmount = 0;\n        staker.balance = 0;\n        staker.unstaked = false;\n        staker.totalRedeemed += leftoverBalance;\n        staker.lastRedeemedAt = block.timestamp;\n        stakes[_msgSender()] = staker;\n        totalRedeemed += leftoverBalance;\n        emit WithdrewStake(_msgSender(), withdrawAmount, leftoverBalance);\n    }\n\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\n        require(\n            stakes[claimerAddress].staked == true,\n            \"FXD: address has not staked\"\n        );\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\n    }\n\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\n        require(stakes[staker].exists, \"FXD: stakeholder does not exists\");\n        require(\n            stakes[staker].staked == false,\n            \"FXD: stakeholder still has stake\"\n        );\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        if (coolOff < unstakeTenure) return 0;\n        return coolOff - unstakeTenure;\n    }\n\n    function getAllStakeHolder() public view returns (address[] memory) {\n        return stakeHolders;\n    }\n\n    function getStakerIndex(\n        address staker\n    ) public view returns (bool, uint256) {\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            if (stakeHolders[i] == staker) return (true, i);\n        }\n        return (false, 0);\n    }\n\n    function earned(address staker) public view returns (uint256 earnings) {\n        earnings = _earned(staker);\n    }\n\n    function getNumberOfStakers() public view returns (uint256 numberofStaker) {\n        return stakeHolders.length;\n    }\n\n    /*\n        Owner Functionality Starts\n    */\n\n    function setMinStakeAmount(uint256 minStakeAmount_) public onlyOwner {\n        require(\n            minStakeAmount_ > 0,\n            \"FXD: minimum stake amount should be greater than 0\"\n        );        \n        uint256 prevValue = minStakeAmount;\n        minStakeAmount = minStakeAmount_;\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\n    }\n\n    function setMaxStakeAmount(uint256 maxStakeAmount_) public onlyOwner {\n        require(\n            maxStakeAmount_ > 0,\n            \"FXD: maximum stake amount should be greater than 0\"\n        );\n        uint256 prevValue = maxStakeAmount;\n        maxStakeAmount = maxStakeAmount_;\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\n    }\n\n    function setRate(uint256 interest_) public onlyOwner {\n        uint256 prevValue = interest;\n        interest = interest_;\n        emit RateChanged(prevValue, interest);\n    }\n\n    function setCoolOff(uint256 coolOff_) public onlyOwner {\n        uint256 prevValue = coolOff;\n        coolOff = coolOff_;\n        emit CoolOffChanged(prevValue, coolOff);\n    }\n\n    function setRedeemInterval(uint256 redeemInterval_) public onlyOwner {\n        uint256 prevValue = redeemInterval;\n        redeemInterval = redeemInterval_;\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\n    }\n\n    function setInterestPrecision(uint256 interestPrecision_) public onlyOwner {\n        require(interestPrecision_ > 0, \"FXD: precision cannot be 0\");\n        uint256 prevValue = interestPrecision;\n        interestPrecision = interestPrecision_;\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\n    }\n\n    function setStartTime(uint256 startTime_) public onlyOwner {\n        require(\n            maxStakingDays > 0,\n            \"FXD: please set max staking days to be greater than 0\"\n        );\n        require(startTime_ > 0, \"FXD: startTime cannot be 0\");\n        require(\n            block.timestamp < startTime_,\n            \"FXD: startTime must be in the future\"\n        );\n        uint256 prevValue = startTime;\n        startTime = startTime_;\n        emit StartTimeChanged(prevValue, startTime);\n        prevValue = expiryTime;\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\n        emit ExpiryTimeChanged(prevValue, expiryTime);\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\n        }\n    }\n\n    function setMaxStakingDays(uint256 maxStakingDays_) public onlyOwner {\n        require(maxStakingDays_ > 0, \"FXD: maxStakingDays cannot be 0\");\n        uint256 prevValue = maxStakingDays;\n        maxStakingDays = maxStakingDays_;\n        emit StartTimeChanged(prevValue, maxStakingDays);\n    }\n\n    function setMaxPoolAmount(uint256 maxPoolAmount_) public onlyOwner {\n        require(maxPoolAmount_ > 0, \"FXD: maxPoolAmount cannot be 0\");\n        require(\n            maxPoolAmount_ >= minStakeAmount,\n            \"FXD: maxPoolAmount should be greater than minStakeAmount\"\n        );\n        require(\n            maxPoolAmount_ >= maxStakeAmount,\n            \"FXD: maxPoolAmount should be greater than maxStakeAmount\"\n        );\n        uint256 prevValue = maxPoolAmount;\n        maxPoolAmount = maxPoolAmount_;\n        if (maxPoolAmount > prevValue)\n            pendingPoolAmount = pendingPoolAmount.add(\n                maxPoolAmount - prevValue\n            );\n        else\n            pendingPoolAmount = pendingPoolAmount.sub(\n                prevValue - maxPoolAmount\n            );\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\n    }\n\n    function withdrawTokens(\n        address beneficiary_,\n        uint256 amount_\n    ) public onlyOwner {\n        require(amount_ > 0, \"FXD: token amount has to be greater than 0\");\n        token.safeTransfer(beneficiary_, amount_);\n        emit WithdrewTokens(beneficiary_, amount_);\n    }\n\n    function withdrawXdc(\n        address beneficiary_,\n        uint256 amount_\n    ) public onlyOwner {\n        require(amount_ > 0, \"FXD: xdc amount has to be greater than 0\");\n        payable(beneficiary_).transfer(amount_);\n        emit WithdrewXdc(beneficiary_, amount_);\n    }\n\n    function destroy() public onlyOwner {\n        selfdestruct(payable(owner()));\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/StakeUSDC.sol": {
      "content": "// File: @openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/security/Pausable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: StakeUSDC.sol\n\n\n\npragma solidity ^0.8.17;\n\n\n\n\n\n\n\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\nlibrary AddressUtils {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param _addr address to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n}\n\ncontract StakeUSDC is Context, Pausable, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using AddressUtils for address;\n\n    uint256 private ONE_DAY = 60; //86400\n\n    IERC20 token;\n    uint256 public decimals;\n    uint256 public totalStaked;\n    uint256 public minStakeAmount = 5000;\n    uint256 public maxStakeAmount = 25000;\n    uint256 public coolOff = ONE_DAY * 7;\n    uint256 public interest;\n    uint256 public totalRedeemed = 0;\n    uint256 public redeemInterval = 30 * ONE_DAY;\n    uint256 public startTime;\n    uint256 public maxStakingDays;\n    uint256 public expiryTime;\n    uint256 public maxPoolAmount = 200000; //greater than or equal to maxstakeamount\n    uint256 public pendingPoolAmount = maxPoolAmount;\n    uint256 public interestPrecision = 100;\n\n    constructor(IERC20 token_, uint256 interest_, uint256 decimals_) {\n        require(\n            address(token_) != address(0),\n            \"Token Address cannot be address 0\"\n        );\n        token = token_;\n        interest = interest_;\n        decimals = decimals_;\n        minStakeAmount = minStakeAmount * 10 ** decimals;\n        maxStakeAmount = maxStakeAmount * 10 ** decimals;\n        maxPoolAmount = maxPoolAmount * 10 ** decimals;\n        pendingPoolAmount = maxPoolAmount;\n    }\n\n    event Staked(address staker, uint256 amount);\n\n    event Unstaked(address staker, uint256 amount);\n    event WithdrewStake(address staker, uint256 principal, uint256 earnings);\n    event ClaimedRewards(address staker, uint256 amount);\n\n    // Parameter Change Events\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event RateChanged(uint256 prevValue, uint256 newValue);\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\n\n    event WithdrewTokens(address beneficiary, uint256 amount);\n    event WithdrewXdc(address beneficiary, uint256 amount);\n\n    struct Stake {\n        address stakerHolder;\n        uint256 stakedAmount;\n        bool staked;\n        bool exists;\n        bool unstaked;\n        uint256 stakedTime;\n        uint256 unstakedTime;\n        uint256 totalRedeemed;\n        uint256 lastRedeemedAt;\n        uint256 balance;\n        uint256 originalStakeAmount;\n    }\n\n    mapping(address => Stake) public stakes;\n    mapping(address => bool) public addressStaked;\n    address[] public stakeHolders;\n\n    modifier whenStaked() {\n        require(stakes[_msgSender()].staked == true, \"USDC: not staked\");\n        _;\n    }\n\n    modifier whenNotStaked() {\n        require(stakes[_msgSender()].staked == false, \"USDC: already staked\");\n        _;\n    }\n\n    modifier whenNotUnStaked() {\n        require(\n            stakes[_msgSender()].unstaked == false,\n            \"USDC: in unstake period\"\n        );\n        _;\n    }\n\n    modifier whenUnStaked() {\n        require(stakes[_msgSender()].unstaked == true, \"USDC: not un-staked\");\n        _;\n    }\n\n    modifier canRedeemDrip(address staker) {\n        require(stakes[staker].exists, \"USDC: staker does not exist\");\n        require(\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\n            \"USDC: cannot claim drip yet\"\n        );\n        _;\n    }\n\n     modifier whenNotExpired() {\n        require(block.timestamp < expiryTime, \"Staking expired can't stake now\");\n        _;\n    }\n\n    function canWithdrawStake(address staker) public view returns (bool) {\n        require(stakes[staker].exists, \"USDC: stakeholder does not exists\");\n        require(\n            stakes[staker].staked == false,\n            \"USDC: stakeholder still has stake\"\n        );\n        require(stakes[staker].unstaked == true, \"USDC: not in unstake period\");\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        return coolOff < unstakeTenure;\n    }\n\n    function transferToken(address to, uint256 amount) external onlyOwner {\n        require(token.transfer(to, amount), \"Token transfer failed!\");\n    }\n\n    function stake(\n        uint256 amount_\n    ) external whenNotStaked whenNotUnStaked whenNotExpired nonReentrant {\n        require(\n            totalStaked + amount_ <= maxPoolAmount,\n            \"Exceeds maximum pool value\"\n        );\n        require(amount_ >= minStakeAmount, \"USDC: invalid amount\");\n        require(amount_ <= maxStakeAmount, \"USDC: invalid amount\");\n\n        Stake memory staker = stakes[_msgSender()];\n\n        staker.staked = true;\n        if (staker.exists == false) {\n            staker.exists = true;\n            staker.stakerHolder = _msgSender();\n        }\n\n        stakeHolders.push(_msgSender());\n        staker.stakedTime = block.timestamp;\n        staker.totalRedeemed = 0;\n        if (startTime > 0) staker.lastRedeemedAt = startTime;\n        else staker.lastRedeemedAt = block.timestamp;\n        staker.stakedAmount = amount_;\n        staker.originalStakeAmount = amount_;\n        staker.balance = 0;\n        stakes[_msgSender()] = staker;\n\n        totalStaked = totalStaked.add(amount_);\n        pendingPoolAmount = pendingPoolAmount.sub(amount_);\n\n        token.safeTransferFrom(_msgSender(), address(this), amount_);\n\n        emit Staked(_msgSender(), amount_);\n    }\n\n    function unstake() external whenStaked whenNotUnStaked nonReentrant {\n        require(expiryTime <= block.timestamp, \"USDC: contract hasn't expired yet\");\n        uint256 leftoverBalance = _earned(_msgSender());\n        Stake memory staker = stakes[_msgSender()];\n        staker.unstakedTime = block.timestamp;\n        staker.staked = false;\n        staker.balance = leftoverBalance;\n        staker.unstaked = true;\n        stakes[_msgSender()] = staker;\n\n        totalStaked = totalStaked.sub(staker.stakedAmount);\n        pendingPoolAmount = pendingPoolAmount.add(staker.stakedAmount);\n        (bool exists, uint256 stakerIndex) = getStakerIndex(_msgSender());\n        require(exists, \"USDC: staker does not exist\");\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\n        delete stakeHolders[stakeHolders.length - 1];\n        stakeHolders.pop();\n\n        emit Unstaked(_msgSender(), staker.stakedAmount);\n    }\n\n    function _earned(\n        address beneficiary_\n    ) internal view returns (uint256 earned) {\n        if (stakes[beneficiary_].staked == false) return 0;\n        uint256 tenure;\n        if (block.timestamp > expiryTime)\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\n        else tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\n        earned = tenure\n            .div(ONE_DAY)\n            .mul(stakes[beneficiary_].stakedAmount)\n            .mul(interest.div(interestPrecision))\n            .div(100)\n            .div(365);\n    }\n\n    function claimEarned(\n        address claimAddress\n    ) public canRedeemDrip(claimAddress) nonReentrant {\n        require(stakes[claimAddress].staked == true, \"USDC: not staked\");\n\n        // update the redeemdate even if earnings are 0\n        uint256 earnings = _earned(claimAddress);\n\n        if (earnings > 0) {\n            token.transfer(claimAddress, earnings);\n        }\n\n        stakes[claimAddress].totalRedeemed += earnings;\n        stakes[claimAddress].lastRedeemedAt = block.timestamp;\n\n        totalRedeemed += earnings;\n\n        emit ClaimedRewards(claimAddress, earnings);\n    }\n\n    function withdrawStake() public whenUnStaked {\n        require(canWithdrawStake(_msgSender()), \"USDC: cannot withdraw yet\");\n        Stake memory staker = stakes[_msgSender()];\n        uint256 withdrawAmount = staker.stakedAmount;\n        uint256 leftoverBalance = staker.balance;\n        token.transfer(_msgSender(), withdrawAmount);\n        if (leftoverBalance > 0) token.transfer(_msgSender(), leftoverBalance);\n        staker.stakedAmount = 0;\n        staker.balance = 0;\n        staker.unstaked = false;\n        staker.totalRedeemed += leftoverBalance;\n        staker.lastRedeemedAt = block.timestamp;\n        stakes[_msgSender()] = staker;\n        totalRedeemed += leftoverBalance;\n        emit WithdrewStake(_msgSender(), withdrawAmount, leftoverBalance);\n    }\n\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\n        require(\n            stakes[claimerAddress].staked == true,\n            \"USDC: address has not staked\"\n        );\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\n    }\n\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\n        require(stakes[staker].exists, \"USDC: stakeholder does not exists\");\n        require(\n            stakes[staker].staked == false,\n            \"USDC: stakeholder still has stake\"\n        );\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        if (coolOff < unstakeTenure) return 0;\n        return coolOff - unstakeTenure;\n    }\n\n    function getAllStakeHolder() public view returns (address[] memory) {\n        return stakeHolders;\n    }\n\n    function getStakerIndex(\n        address staker\n    ) public view returns (bool, uint256) {\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            if (stakeHolders[i] == staker) return (true, i);\n        }\n        return (false, 0);\n    }\n\n    function earned(address staker) public view returns (uint256 earnings) {\n        earnings = _earned(staker);\n    }\n\n    function getNumberOfStakers() public view returns (uint256 numberofStaker) {\n        return stakeHolders.length;\n    }\n\n    /*\n        Owner Functionality Starts\n    */\n\n    function setMinStakeAmount(uint256 minStakeAmount_) public onlyOwner {\n        require(\n            minStakeAmount_ > 0,\n            \"USDC: minimum stake amount should be greater than 0\"\n        );        \n        uint256 prevValue = minStakeAmount;\n        minStakeAmount = minStakeAmount_;\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\n    }\n\n    function setMaxStakeAmount(uint256 maxStakeAmount_) public onlyOwner {\n        require(\n            maxStakeAmount_ > 0,\n            \"USDC: maximum stake amount should be greater than 0\"\n        );\n        uint256 prevValue = maxStakeAmount;\n        maxStakeAmount = maxStakeAmount_;\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\n    }\n\n    function setRate(uint256 interest_) public onlyOwner {\n        uint256 prevValue = interest;\n        interest = interest_;\n        emit RateChanged(prevValue, interest);\n    }\n\n    function setCoolOff(uint256 coolOff_) public onlyOwner {\n        uint256 prevValue = coolOff;\n        coolOff = coolOff_;\n        emit CoolOffChanged(prevValue, coolOff);\n    }\n\n    function setRedeemInterval(uint256 redeemInterval_) public onlyOwner {\n        uint256 prevValue = redeemInterval;\n        redeemInterval = redeemInterval_;\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\n    }\n\n    function setInterestPrecision(uint256 interestPrecision_) public onlyOwner {\n        require(interestPrecision_ > 0, \"USDC: precision cannot be 0\");\n        uint256 prevValue = interestPrecision;\n        interestPrecision = interestPrecision_;\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\n    }\n\n    function setStartTime(uint256 startTime_) public onlyOwner {\n        require(\n            maxStakingDays > 0,\n            \"USDC: please set max staking days to be greater than 0\"\n        );\n        require(startTime_ > 0, \"USDC: startTime cannot be 0\");\n        require(\n            block.timestamp < startTime_,\n            \"USDC: startTime must be in the future\"\n        );\n        uint256 prevValue = startTime;\n        startTime = startTime_;\n        emit StartTimeChanged(prevValue, startTime);\n        prevValue = expiryTime;\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\n        emit ExpiryTimeChanged(prevValue, expiryTime);\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\n        }\n    }\n\n    function setMaxStakingDays(uint256 maxStakingDays_) public onlyOwner {\n        require(maxStakingDays_ > 0, \"USDC: maxStakingDays cannot be 0\");\n        uint256 prevValue = maxStakingDays;\n        maxStakingDays = maxStakingDays_;\n        emit StartTimeChanged(prevValue, maxStakingDays);\n    }\n\n    function setMaxPoolAmount(uint256 maxPoolAmount_) public onlyOwner {\n        require(maxPoolAmount_ > 0, \"USDC: maxPoolAmount cannot be 0\");\n        require(\n            maxPoolAmount_ >= minStakeAmount,\n            \"USDC: maxPoolAmount should be greater than minStakeAmount\"\n        );\n        require(\n            maxPoolAmount_ >= maxStakeAmount,\n            \"USDC: maxPoolAmount should be greater than maxStakeAmount\"\n        );\n        uint256 prevValue = maxPoolAmount;\n        maxPoolAmount = maxPoolAmount_;\n        if (maxPoolAmount > prevValue)\n            pendingPoolAmount = pendingPoolAmount.add(\n                maxPoolAmount - prevValue\n            );\n        else\n            pendingPoolAmount = pendingPoolAmount.add(\n                prevValue - maxPoolAmount\n            );\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\n    }\n\n    function withdrawTokens(\n        address beneficiary_,\n        uint256 amount_\n    ) public onlyOwner {\n        require(amount_ > 0, \"USDC: token amount has to be greater than 0\");\n        token.safeTransfer(beneficiary_, amount_);\n        emit WithdrewTokens(beneficiary_, amount_);\n    }\n\n    function withdrawXdc(\n        address beneficiary_,\n        uint256 amount_\n    ) public onlyOwner {\n        require(amount_ > 0, \"USDC: xdc amount has to be greater than 0\");\n        payable(beneficiary_).transfer(amount_);\n        emit WithdrewXdc(beneficiary_, amount_);\n    }\n\n    function destroy() public onlyOwner {\n        selfdestruct(payable(owner()));\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/StakingContractFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./TokenStaking.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract StakingContractFactory is Ownable {\n    mapping(address => address[]) private pools;\n    \n    event PoolDeployed(\n        address indexed token,\n        address indexed pool,\n        uint256 interest,\n        uint256 decimals,\n        uint256 index\n    );\n\n    function deploy(\n        IERC20 token,\n        uint256 interest,\n        uint256 decimals,\n        string calldata name\n    ) external onlyOwner returns (address pool) {\n        pool = address(new TokenStaking(token, interest, decimals, name));\n        pools[address(token)].push(pool);\n        \n        TokenStaking(pool).transferOwnership(owner());\n\n        emit PoolDeployed(\n            address(token),\n            pool,\n            interest,\n            decimals,\n            pools[address(token)].length\n        );\n    }\n\n    function getPools(address token) external view returns (address[] memory) {\n        return pools[token];\n    }\n} "
    },
    "contracts/TokenStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract TokenStaking is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    uint256 private constant ONE_DAY = 86400;\n\n    // Immutable state variables (set in constructor)\n    IERC20 public immutable stakingToken;\n    uint256 public immutable tokenDecimals;\n    string public tokenSymbol;\n    string public poolName;\n    bool public paused;\n\n    // Configurable state variables (set in initialize)\n    uint256 public totalStaked;\n    uint256 public minStakeAmount;\n    uint256 public maxStakeAmount;\n    uint256 public coolOff;\n    uint256 public interest;\n    uint256 public totalRedeemed;\n    uint256 public redeemInterval;\n    uint256 public maxPoolAmount;\n    uint256 public pendingPoolAmount;\n    uint256 public interestPrecision;\n    uint256 public startTime;\n    uint256 public maxStakingDays;\n    uint256 public expiryTime;\n\n    // Initialization flag\n    bool private initialized;\n\n    struct Stake {\n        uint256 stakedAmount;\n        bool staked;\n        bool exists;\n        bool unstaked;\n        uint256 stakedTime;\n        uint256 unstakedTime;\n        uint256 totalRedeemed;\n        uint256 lastRedeemedAt;\n        uint256 balance;\n        uint256 originalStakeAmount;\n    }\n\n    mapping(address => Stake) public stakes;\n    address[] public stakeHolders;\n\n    // Events\n    event Initialized(\n        uint256 minStakeAmount,\n        uint256 maxStakeAmount,\n        uint256 coolOff,\n        uint256 redeemInterval,\n        uint256 maxPoolAmount,\n        uint256 interestPrecision\n    );\n    event Staked(address indexed staker, uint256 amount);\n    event Unstaked(address indexed staker, uint256 amount);\n    event WithdrewStake(address indexed staker, uint256 principal, uint256 earnings);\n    event ClaimedRewards(address indexed staker, uint256 amount);\n    event Paused();\n    event Unpaused();\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event RateChanged(uint256 prevValue, uint256 newValue);\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\n    event WithdrewTokens(address indexed beneficiary, uint256 amount);\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\n\n    modifier whenInitialized() {\n        require(initialized, \"Not initialized\");\n        _;\n    }\n\n    modifier whenNotInitialized() {\n        require(!initialized, \"Already initialized\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!paused, \"Contract paused\");\n        _;\n    }\n\n    modifier whenStaked() {\n        require(stakes[msg.sender].staked, \"Not staked\");\n        _;\n    }\n\n    modifier whenNotStaked() {\n        require(!stakes[msg.sender].staked, \"Already staked\");\n        _;\n    }\n\n    modifier whenNotUnStaked() {\n        require(!stakes[msg.sender].unstaked, \"In unstake period\");\n        _;\n    }\n\n    modifier whenNotExpired() {\n        require(block.timestamp < expiryTime, \"Contract expired\");\n        _;\n    }\n\n    modifier canRedeemDrip(address staker) {\n        require(stakes[staker].exists, \"Staker does not exist\");\n        require(\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\n            \"Cannot claim drip yet\"\n        );\n        _;\n    }\n\n    modifier whenUnStaked() {\n        require(stakes[msg.sender].unstaked, \"Not unstaked\");\n        _;\n    }\n\n    constructor(\n        IERC20 token_,\n        uint256 interest_,\n        uint256 decimals_,\n        string memory poolName_\n    ) {\n        require(address(token_) != address(0), \"Zero address\");\n        require(bytes(poolName_).length > 0, \"Empty name\");\n        \n        stakingToken = token_;\n        tokenDecimals = decimals_;\n        poolName = poolName_;\n        interest = interest_;\n        \n        // Try to get symbol from token\n        try IERC20Metadata(address(token_)).symbol() returns (string memory symbol) {\n            tokenSymbol = symbol;\n        } catch {\n            tokenSymbol = \"UNKNOWN\";\n        }\n    }\n\n    function initialize(\n        uint256 minStakeAmount_,\n        uint256 maxStakeAmount_,\n        uint256 coolOff_,\n        uint256 redeemInterval_,\n        uint256 maxPoolAmount_,\n        uint256 interestPrecision_\n    ) external onlyOwner whenNotInitialized {\n        require(minStakeAmount_ > 0, \"Min stake = 0\");\n        require(maxStakeAmount_ >= minStakeAmount_, \"Max < min\");\n        require(maxPoolAmount_ >= maxStakeAmount_, \"Pool < max\");\n        require(interestPrecision_ > 0, \"Precision = 0\");\n\n        minStakeAmount = minStakeAmount_ * 10**tokenDecimals;\n        maxStakeAmount = maxStakeAmount_ * 10**tokenDecimals;\n        maxPoolAmount = maxPoolAmount_ * 10**tokenDecimals;\n        coolOff = coolOff_;\n        redeemInterval = redeemInterval_;\n        interestPrecision = interestPrecision_;\n        pendingPoolAmount = maxPoolAmount;\n        \n        initialized = true;\n\n        emit Initialized(\n            minStakeAmount,\n            maxStakeAmount,\n            coolOff,\n            redeemInterval,\n            maxPoolAmount,\n            interestPrecision\n        );\n    }\n\n    function stake(uint256 amount_) external whenInitialized whenNotStaked whenNotUnStaked whenNotExpired nonReentrant {\n        require(totalStaked + amount_ <= maxPoolAmount, \"Exceeds maximum pool value\");\n        require(amount_ >= minStakeAmount, \"Invalid amount: below minimum\");\n        require(amount_ <= maxStakeAmount, \"Invalid amount: above maximum\");\n\n        Stake memory staker = stakes[msg.sender];\n\n        staker.staked = true;\n        if (!staker.exists) {\n            staker.exists = true;\n            stakeHolders.push(msg.sender);\n        }\n\n        staker.stakedTime = block.timestamp;\n        staker.totalRedeemed = 0;\n        if (startTime > 0) {\n            staker.lastRedeemedAt = startTime;\n        } else {\n            staker.lastRedeemedAt = block.timestamp;\n        }\n        staker.stakedAmount = amount_;\n        staker.originalStakeAmount = amount_;\n        staker.balance = 0;\n        stakes[msg.sender] = staker;\n\n        totalStaked += amount_;\n        pendingPoolAmount -= amount_;\n\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);\n\n        emit Staked(msg.sender, amount_);\n    }\n\n    function unstake() external whenStaked whenNotUnStaked nonReentrant {\n        require(expiryTime <= block.timestamp, \"Contract hasn't expired yet\");\n        uint256 leftoverBalance = _earned(msg.sender);\n        Stake memory staker = stakes[msg.sender];\n        staker.unstakedTime = block.timestamp;\n        staker.staked = false;\n        staker.balance = leftoverBalance;\n        staker.unstaked = true;\n        stakes[msg.sender] = staker;\n\n        totalStaked -= staker.stakedAmount;\n        pendingPoolAmount += staker.stakedAmount;\n\n        (bool exists, uint256 stakerIndex) = getStakerIndex(msg.sender);\n        require(exists, \"Staker does not exist\");\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\n        stakeHolders.pop();\n\n        emit Unstaked(msg.sender, staker.stakedAmount);\n    }\n\n    function _earned(address beneficiary_) internal view returns (uint256 earned) {\n        if (stakes[beneficiary_].staked == false) return 0;\n        \n        uint256 tenure;\n        if (block.timestamp > expiryTime) {\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\n        } else {\n            tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\n        }\n        \n        // Calculate earnings using standard arithmetic instead of SafeMath\n        // Since Solidity 0.8.x has built-in overflow checks\n        earned = tenure * stakes[beneficiary_].stakedAmount * interest;\n        earned = earned / interestPrecision / 100 / (365 * ONE_DAY);\n        \n        return earned;\n    }\n\n    function claimEarned(address claimAddress) public canRedeemDrip(claimAddress) nonReentrant {\n        require(stakes[claimAddress].staked == true, \"Not staked\");\n\n        uint256 earnings = _earned(claimAddress);\n\n        if (earnings > 0) {\n            stakingToken.safeTransfer(claimAddress, earnings);\n        }\n\n        stakes[claimAddress].totalRedeemed += earnings;\n        stakes[claimAddress].lastRedeemedAt = block.timestamp;\n        totalRedeemed += earnings;\n\n        emit ClaimedRewards(claimAddress, earnings);\n    }\n\n    function withdrawStake() public whenUnStaked {\n        require(canWithdrawStake(msg.sender), \"Cannot withdraw yet\");\n        Stake memory staker = stakes[msg.sender];\n        uint256 withdrawAmount = staker.stakedAmount;\n        uint256 leftoverBalance = staker.balance;\n\n        stakingToken.safeTransfer(msg.sender, withdrawAmount);\n        if (leftoverBalance > 0) {\n            stakingToken.safeTransfer(msg.sender, leftoverBalance);\n        }\n\n        staker.stakedAmount = 0;\n        staker.balance = 0;\n        staker.unstaked = false;\n        staker.totalRedeemed += leftoverBalance;\n        staker.lastRedeemedAt = block.timestamp;\n        stakes[msg.sender] = staker;\n        totalRedeemed += leftoverBalance;\n\n        emit WithdrewStake(msg.sender, withdrawAmount, leftoverBalance);\n    }\n\n    function canWithdrawStake(address staker) public view returns (bool) {\n        require(stakes[staker].exists, \"Stakeholder does not exist\");\n        require(stakes[staker].staked == false, \"Stakeholder still has stake\");\n        require(stakes[staker].unstaked == true, \"Not in unstake period\");\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        return coolOff < unstakeTenure;\n    }\n\n    function earned(address staker) public view returns (uint256) {\n        return _earned(staker);\n    }\n\n    function getStakerIndex(address staker) public view returns (bool, uint256) {\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            if (stakeHolders[i] == staker) return (true, i);\n        }\n        return (false, 0);\n    }\n\n    function getAllStakeHolders() public view returns (address[] memory) {\n        return stakeHolders;\n    }\n\n    function getNumberOfStakers() public view returns (uint256) {\n        return stakeHolders.length;\n    }\n\n    // Owner functions\n    function setMinStakeAmount(uint256 minStakeAmount_) external onlyOwner {\n        require(minStakeAmount_ > 0, \"Minimum stake amount should be greater than 0\");\n        uint256 prevValue = minStakeAmount;\n        minStakeAmount = minStakeAmount_;\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\n    }\n\n    function setMaxStakeAmount(uint256 maxStakeAmount_) external onlyOwner {\n        require(maxStakeAmount_ > 0, \"Maximum stake amount should be greater than 0\");\n        uint256 prevValue = maxStakeAmount;\n        maxStakeAmount = maxStakeAmount_;\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\n    }\n\n    function setRate(uint256 interest_) external onlyOwner {\n        uint256 prevValue = interest;\n        interest = interest_;\n        emit RateChanged(prevValue, interest);\n    }\n\n    function setCoolOff(uint256 coolOff_) external onlyOwner {\n        uint256 prevValue = coolOff;\n        coolOff = coolOff_;\n        emit CoolOffChanged(prevValue, coolOff);\n    }\n\n    function setRedeemInterval(uint256 redeemInterval_) external onlyOwner {\n        uint256 prevValue = redeemInterval;\n        redeemInterval = redeemInterval_;\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\n    }\n\n    function setStartTime(uint256 startTime_) external onlyOwner {\n        require(maxStakingDays > 0, \"Set max staking days first\");\n        require(startTime_ > 0, \"Start time cannot be 0\");\n        require(block.timestamp < startTime_, \"Start time must be in the future\");\n        \n        uint256 prevValue = startTime;\n        startTime = startTime_;\n        emit StartTimeChanged(prevValue, startTime);\n        \n        prevValue = expiryTime;\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\n        emit ExpiryTimeChanged(prevValue, expiryTime);\n        \n        for (uint256 i = 0; i < stakeHolders.length; i++) {\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\n        }\n    }\n\n    function setMaxStakingDays(uint256 maxStakingDays_) external onlyOwner {\n        require(maxStakingDays_ > 0, \"Max staking days cannot be 0\");\n        uint256 prevValue = maxStakingDays;\n        maxStakingDays = maxStakingDays_;\n        emit MaxStakingDaysChanged(prevValue, maxStakingDays);\n    }\n\n    function setMaxPoolAmount(uint256 maxPoolAmount_) external onlyOwner {\n        require(maxPoolAmount_ > 0, \"Max pool amount cannot be 0\");\n        require(maxPoolAmount_ >= minStakeAmount, \"Max pool amount should be greater than min stake amount\");\n        require(maxPoolAmount_ >= maxStakeAmount, \"Max pool amount should be greater than max stake amount\");\n        \n        uint256 prevValue = maxPoolAmount;\n        maxPoolAmount = maxPoolAmount_;\n        if (maxPoolAmount > prevValue) {\n            pendingPoolAmount += (maxPoolAmount - prevValue);\n        } else {\n            pendingPoolAmount -= (prevValue - maxPoolAmount);\n        }\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\n    }\n\n    function withdrawTokens(address beneficiary_, uint256 amount_) external onlyOwner {\n        require(amount_ > 0, \"Amount has to be greater than 0\");\n        stakingToken.safeTransfer(beneficiary_, amount_);\n        emit WithdrewTokens(beneficiary_, amount_);\n    }\n\n    function _pause() internal {\n        require(!paused, \"Already paused\");\n        paused = true;\n        emit Paused();\n    }\n\n    function _unpause() internal {\n        require(paused, \"Not paused\");\n        paused = false;\n        emit Unpaused();\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setInterestPrecision(uint256 interestPrecision_) external onlyOwner {\n        require(interestPrecision_ > 0, \"Precision cannot be 0\");\n        uint256 prevValue = interestPrecision;\n        interestPrecision = interestPrecision_;\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\n    }\n\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\n        require(stakes[claimerAddress].staked == true, \"Address has not staked\");\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\n    }\n\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\n        require(stakes[staker].exists, \"Stakeholder does not exist\");\n        require(stakes[staker].staked == false, \"Stakeholder still has stake\");\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\n        if (coolOff < unstakeTenure) return 0;\n        return coolOff - unstakeTenure;\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}