{
  "address": "0x7758114BB4Fa2DcdBd9655C294Cf4b48F93a23fF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf05e74cd59d5df42e88242b14716ba22254ea20a1d7c7401698e25b7bbdaa977",
  "receipt": {
    "to": null,
    "from": "0xaf28621e287e4EA0F14FA7e7ba365206FD6279DA",
    "contractAddress": "0x7758114BB4Fa2DcdBd9655C294Cf4b48F93a23fF",
    "transactionIndex": 0,
    "gasUsed": "3874078",
    "logsBloom": "0x
    "blockHash": "0x3f6bd51ad55f57ec5f18bc5e6fe322d933296156eb6e6f6929ccbcc524a25e4e",
    "transactionHash": "0xf05e74cd59d5df42e88242b14716ba22254ea20a1d7c7401698e25b7bbdaa977",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 75667203,
        "transactionHash": "0xf05e74cd59d5df42e88242b14716ba22254ea20a1d7c7401698e25b7bbdaa977",
        "address": "0x7758114BB4Fa2DcdBd9655C294Cf4b48F93a23fF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000af28621e287e4ea0f14fa7e7ba365206fd6279da"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3f6bd51ad55f57ec5f18bc5e6fe322d933296156eb6e6f6929ccbcc524a25e4e"
      }
    ],
    "blockNumber": 75667203,
    "cumulativeGasUsed": "3874078",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a2e15c0fc97ace544c10b15d878f9982",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingContractFactory.sol\":\"StakingContractFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/StakingContractFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./TokenStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract StakingContractFactory is Ownable {\\n    mapping(address => address[]) private pools;\\n    \\n    event PoolDeployed(\\n        address indexed token,\\n        address indexed pool,\\n        uint256 interest,\\n        uint256 decimals,\\n        uint256 index\\n    );\\n\\n    function deploy(\\n        IERC20 token,\\n        uint256 interest,\\n        uint256 decimals,\\n        string calldata name\\n    ) external onlyOwner returns (address pool) {\\n        pool = address(new TokenStaking(token, interest, decimals, name));\\n        pools[address(token)].push(pool);\\n        \\n        TokenStaking(pool).transferOwnership(owner());\\n\\n        emit PoolDeployed(\\n            address(token),\\n            pool,\\n            interest,\\n            decimals,\\n            pools[address(token)].length\\n        );\\n    }\\n\\n    function getPools(address token) external view returns (address[] memory) {\\n        return pools[token];\\n    }\\n} \",\"keccak256\":\"0x6a1115508f2595fa78328466bfd169e8ad783d293dec2e13bc3b3da929683d32\",\"license\":\"MIT\"},\"contracts/TokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract TokenStaking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant ONE_DAY = 86400;\\n\\n    // Immutable state variables (set in constructor)\\n    IERC20 public immutable stakingToken;\\n    uint256 public immutable tokenDecimals;\\n    string public tokenSymbol;\\n    string public poolName;\\n    bool public paused;\\n\\n    // Configurable state variables (set in initialize)\\n    uint256 public totalStaked;\\n    uint256 public minStakeAmount;\\n    uint256 public maxStakeAmount;\\n    uint256 public coolOff;\\n    uint256 public interest;\\n    uint256 public totalRedeemed;\\n    uint256 public redeemInterval;\\n    uint256 public maxPoolAmount;\\n    uint256 public pendingPoolAmount;\\n    uint256 public interestPrecision;\\n    uint256 public startTime;\\n    uint256 public maxStakingDays;\\n    uint256 public expiryTime;\\n\\n    // Initialization flag\\n    bool private initialized;\\n\\n    struct Stake {\\n        uint256 stakedAmount;\\n        bool staked;\\n        bool exists;\\n        bool unstaked;\\n        uint256 stakedTime;\\n        uint256 unstakedTime;\\n        uint256 totalRedeemed;\\n        uint256 lastRedeemedAt;\\n        uint256 balance;\\n        uint256 originalStakeAmount;\\n    }\\n\\n    mapping(address => Stake) public stakes;\\n    address[] public stakeHolders;\\n\\n    // Events\\n    event Initialized(\\n        uint256 minStakeAmount,\\n        uint256 maxStakeAmount,\\n        uint256 coolOff,\\n        uint256 redeemInterval,\\n        uint256 maxPoolAmount,\\n        uint256 interestPrecision\\n    );\\n    event Staked(address indexed staker, uint256 amount);\\n    event Unstaked(address indexed staker, uint256 amount);\\n    event WithdrewStake(address indexed staker, uint256 principal, uint256 earnings);\\n    event ClaimedRewards(address indexed staker, uint256 amount);\\n    event Paused();\\n    event Unpaused();\\n    event MinStakeAmountChanged(uint256 prevValue, uint256 newValue);\\n    event MaxStakeAmountChanged(uint256 prevValue, uint256 newValue);\\n    event RateChanged(uint256 prevValue, uint256 newValue);\\n    event CoolOffChanged(uint256 prevValue, uint256 newValue);\\n    event RedeemIntervalChanged(uint256 prevValue, uint256 newValue);\\n    event StartTimeChanged(uint256 prevValue, uint256 newValue);\\n    event MaxStakingDaysChanged(uint256 prevValue, uint256 newValue);\\n    event ExpiryTimeChanged(uint256 prevValue, uint256 newValue);\\n    event MaxPoolAmountChanged(uint256 prevValue, uint256 newValue);\\n    event WithdrewTokens(address indexed beneficiary, uint256 amount);\\n    event InterestPrecisionChanged(uint256 prevValue, uint256 newValue);\\n\\n    modifier whenInitialized() {\\n        require(initialized, \\\"Not initialized\\\");\\n        _;\\n    }\\n\\n    modifier whenNotInitialized() {\\n        require(!initialized, \\\"Already initialized\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Contract paused\\\");\\n        _;\\n    }\\n\\n    modifier whenStaked() {\\n        require(stakes[msg.sender].staked, \\\"Not staked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotStaked() {\\n        require(!stakes[msg.sender].staked, \\\"Already staked\\\");\\n        _;\\n    }\\n\\n    modifier whenNotUnStaked() {\\n        require(!stakes[msg.sender].unstaked, \\\"In unstake period\\\");\\n        _;\\n    }\\n\\n    modifier whenNotExpired() {\\n        require(block.timestamp < expiryTime, \\\"Contract expired\\\");\\n        _;\\n    }\\n\\n    modifier canRedeemDrip(address staker) {\\n        require(stakes[staker].exists, \\\"Staker does not exist\\\");\\n        require(\\n            stakes[staker].lastRedeemedAt + redeemInterval <= block.timestamp,\\n            \\\"Cannot claim drip yet\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenUnStaked() {\\n        require(stakes[msg.sender].unstaked, \\\"Not unstaked\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 token_,\\n        uint256 interest_,\\n        uint256 decimals_,\\n        string memory poolName_\\n    ) {\\n        require(address(token_) != address(0), \\\"Zero address\\\");\\n        require(bytes(poolName_).length > 0, \\\"Empty name\\\");\\n        \\n        stakingToken = token_;\\n        tokenDecimals = decimals_;\\n        poolName = poolName_;\\n        interest = interest_;\\n        \\n        // Try to get symbol from token\\n        try IERC20Metadata(address(token_)).symbol() returns (string memory symbol) {\\n            tokenSymbol = symbol;\\n        } catch {\\n            tokenSymbol = \\\"UNKNOWN\\\";\\n        }\\n    }\\n\\n    function initialize(\\n        uint256 minStakeAmount_,\\n        uint256 maxStakeAmount_,\\n        uint256 coolOff_,\\n        uint256 redeemInterval_,\\n        uint256 maxPoolAmount_,\\n        uint256 interestPrecision_\\n    ) external onlyOwner whenNotInitialized {\\n        require(minStakeAmount_ > 0, \\\"Min stake = 0\\\");\\n        require(maxStakeAmount_ >= minStakeAmount_, \\\"Max < min\\\");\\n        require(maxPoolAmount_ >= maxStakeAmount_, \\\"Pool < max\\\");\\n        require(interestPrecision_ > 0, \\\"Precision = 0\\\");\\n\\n        minStakeAmount = minStakeAmount_ * 10**tokenDecimals;\\n        maxStakeAmount = maxStakeAmount_ * 10**tokenDecimals;\\n        maxPoolAmount = maxPoolAmount_ * 10**tokenDecimals;\\n        coolOff = coolOff_;\\n        redeemInterval = redeemInterval_;\\n        interestPrecision = interestPrecision_;\\n        pendingPoolAmount = maxPoolAmount;\\n        \\n        initialized = true;\\n\\n        emit Initialized(\\n            minStakeAmount,\\n            maxStakeAmount,\\n            coolOff,\\n            redeemInterval,\\n            maxPoolAmount,\\n            interestPrecision\\n        );\\n    }\\n\\n    function stake(uint256 amount_) external whenInitialized whenNotStaked whenNotUnStaked whenNotExpired nonReentrant {\\n        require(totalStaked + amount_ <= maxPoolAmount, \\\"Exceeds maximum pool value\\\");\\n        require(amount_ >= minStakeAmount, \\\"Invalid amount: below minimum\\\");\\n        require(amount_ <= maxStakeAmount, \\\"Invalid amount: above maximum\\\");\\n\\n        Stake memory staker = stakes[msg.sender];\\n\\n        staker.staked = true;\\n        if (!staker.exists) {\\n            staker.exists = true;\\n            stakeHolders.push(msg.sender);\\n        }\\n\\n        staker.stakedTime = block.timestamp;\\n        staker.totalRedeemed = 0;\\n        if (startTime > 0) {\\n            staker.lastRedeemedAt = startTime;\\n        } else {\\n            staker.lastRedeemedAt = block.timestamp;\\n        }\\n        staker.stakedAmount = amount_;\\n        staker.originalStakeAmount = amount_;\\n        staker.balance = 0;\\n        stakes[msg.sender] = staker;\\n\\n        totalStaked += amount_;\\n        pendingPoolAmount -= amount_;\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);\\n\\n        emit Staked(msg.sender, amount_);\\n    }\\n\\n    function unstake() external whenStaked whenNotUnStaked nonReentrant {\\n        require(expiryTime <= block.timestamp, \\\"Contract hasn't expired yet\\\");\\n        uint256 leftoverBalance = _earned(msg.sender);\\n        Stake memory staker = stakes[msg.sender];\\n        staker.unstakedTime = block.timestamp;\\n        staker.staked = false;\\n        staker.balance = leftoverBalance;\\n        staker.unstaked = true;\\n        stakes[msg.sender] = staker;\\n\\n        totalStaked -= staker.stakedAmount;\\n        pendingPoolAmount += staker.stakedAmount;\\n\\n        (bool exists, uint256 stakerIndex) = getStakerIndex(msg.sender);\\n        require(exists, \\\"Staker does not exist\\\");\\n        stakeHolders[stakerIndex] = stakeHolders[stakeHolders.length - 1];\\n        stakeHolders.pop();\\n\\n        emit Unstaked(msg.sender, staker.stakedAmount);\\n    }\\n\\n    function _earned(address beneficiary_) internal view returns (uint256 earned) {\\n        if (stakes[beneficiary_].staked == false) return 0;\\n        \\n        uint256 tenure;\\n        if (block.timestamp > expiryTime) {\\n            tenure = (expiryTime - stakes[beneficiary_].lastRedeemedAt);\\n        } else {\\n            tenure = (block.timestamp - stakes[beneficiary_].lastRedeemedAt);\\n        }\\n        \\n        // Calculate earnings using standard arithmetic instead of SafeMath\\n        // Since Solidity 0.8.x has built-in overflow checks\\n        earned = tenure * stakes[beneficiary_].stakedAmount * interest;\\n        earned = earned / interestPrecision / 100 / (365 * ONE_DAY);\\n        \\n        return earned;\\n    }\\n\\n    function claimEarned(address claimAddress) public canRedeemDrip(claimAddress) nonReentrant {\\n        require(stakes[claimAddress].staked == true, \\\"Not staked\\\");\\n\\n        uint256 earnings = _earned(claimAddress);\\n\\n        if (earnings > 0) {\\n            stakingToken.safeTransfer(claimAddress, earnings);\\n        }\\n\\n        stakes[claimAddress].totalRedeemed += earnings;\\n        stakes[claimAddress].lastRedeemedAt = block.timestamp;\\n        totalRedeemed += earnings;\\n\\n        emit ClaimedRewards(claimAddress, earnings);\\n    }\\n\\n    function withdrawStake() public whenUnStaked {\\n        require(canWithdrawStake(msg.sender), \\\"Cannot withdraw yet\\\");\\n        Stake memory staker = stakes[msg.sender];\\n        uint256 withdrawAmount = staker.stakedAmount;\\n        uint256 leftoverBalance = staker.balance;\\n\\n        stakingToken.safeTransfer(msg.sender, withdrawAmount);\\n        if (leftoverBalance > 0) {\\n            stakingToken.safeTransfer(msg.sender, leftoverBalance);\\n        }\\n\\n        staker.stakedAmount = 0;\\n        staker.balance = 0;\\n        staker.unstaked = false;\\n        staker.totalRedeemed += leftoverBalance;\\n        staker.lastRedeemedAt = block.timestamp;\\n        stakes[msg.sender] = staker;\\n        totalRedeemed += leftoverBalance;\\n\\n        emit WithdrewStake(msg.sender, withdrawAmount, leftoverBalance);\\n    }\\n\\n    function canWithdrawStake(address staker) public view returns (bool) {\\n        require(stakes[staker].exists, \\\"Stakeholder does not exist\\\");\\n        require(stakes[staker].staked == false, \\\"Stakeholder still has stake\\\");\\n        require(stakes[staker].unstaked == true, \\\"Not in unstake period\\\");\\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\\n        return coolOff < unstakeTenure;\\n    }\\n\\n    function earned(address staker) public view returns (uint256) {\\n        return _earned(staker);\\n    }\\n\\n    function getStakerIndex(address staker) public view returns (bool, uint256) {\\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\\n            if (stakeHolders[i] == staker) return (true, i);\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getAllStakeHolders() public view returns (address[] memory) {\\n        return stakeHolders;\\n    }\\n\\n    function getNumberOfStakers() public view returns (uint256) {\\n        return stakeHolders.length;\\n    }\\n\\n    // Owner functions\\n    function setMinStakeAmount(uint256 minStakeAmount_) external onlyOwner {\\n        require(minStakeAmount_ > 0, \\\"Minimum stake amount should be greater than 0\\\");\\n        uint256 prevValue = minStakeAmount;\\n        minStakeAmount = minStakeAmount_;\\n        emit MinStakeAmountChanged(prevValue, minStakeAmount);\\n    }\\n\\n    function setMaxStakeAmount(uint256 maxStakeAmount_) external onlyOwner {\\n        require(maxStakeAmount_ > 0, \\\"Maximum stake amount should be greater than 0\\\");\\n        uint256 prevValue = maxStakeAmount;\\n        maxStakeAmount = maxStakeAmount_;\\n        emit MaxStakeAmountChanged(prevValue, maxStakeAmount);\\n    }\\n\\n    function setRate(uint256 interest_) external onlyOwner {\\n        uint256 prevValue = interest;\\n        interest = interest_;\\n        emit RateChanged(prevValue, interest);\\n    }\\n\\n    function setCoolOff(uint256 coolOff_) external onlyOwner {\\n        uint256 prevValue = coolOff;\\n        coolOff = coolOff_;\\n        emit CoolOffChanged(prevValue, coolOff);\\n    }\\n\\n    function setRedeemInterval(uint256 redeemInterval_) external onlyOwner {\\n        uint256 prevValue = redeemInterval;\\n        redeemInterval = redeemInterval_;\\n        emit RedeemIntervalChanged(prevValue, redeemInterval);\\n    }\\n\\n    function setStartTime(uint256 startTime_) external onlyOwner {\\n        require(maxStakingDays > 0, \\\"Set max staking days first\\\");\\n        require(startTime_ > 0, \\\"Start time cannot be 0\\\");\\n        require(block.timestamp < startTime_, \\\"Start time must be in the future\\\");\\n        \\n        uint256 prevValue = startTime;\\n        startTime = startTime_;\\n        emit StartTimeChanged(prevValue, startTime);\\n        \\n        prevValue = expiryTime;\\n        expiryTime = startTime + (maxStakingDays * ONE_DAY);\\n        emit ExpiryTimeChanged(prevValue, expiryTime);\\n        \\n        for (uint256 i = 0; i < stakeHolders.length; i++) {\\n            stakes[stakeHolders[i]].lastRedeemedAt = startTime;\\n        }\\n    }\\n\\n    function setMaxStakingDays(uint256 maxStakingDays_) external onlyOwner {\\n        require(maxStakingDays_ > 0, \\\"Max staking days cannot be 0\\\");\\n        uint256 prevValue = maxStakingDays;\\n        maxStakingDays = maxStakingDays_;\\n        emit MaxStakingDaysChanged(prevValue, maxStakingDays);\\n    }\\n\\n    function setMaxPoolAmount(uint256 maxPoolAmount_) external onlyOwner {\\n        require(maxPoolAmount_ > 0, \\\"Max pool amount cannot be 0\\\");\\n        require(maxPoolAmount_ >= minStakeAmount, \\\"Max pool amount should be greater than min stake amount\\\");\\n        require(maxPoolAmount_ >= maxStakeAmount, \\\"Max pool amount should be greater than max stake amount\\\");\\n        \\n        uint256 prevValue = maxPoolAmount;\\n        maxPoolAmount = maxPoolAmount_;\\n        if (maxPoolAmount > prevValue) {\\n            pendingPoolAmount += (maxPoolAmount - prevValue);\\n        } else {\\n            pendingPoolAmount -= (prevValue - maxPoolAmount);\\n        }\\n        emit MaxPoolAmountChanged(prevValue, maxPoolAmount);\\n    }\\n\\n    function withdrawTokens(address beneficiary_, uint256 amount_) external onlyOwner {\\n        require(amount_ > 0, \\\"Amount has to be greater than 0\\\");\\n        stakingToken.safeTransfer(beneficiary_, amount_);\\n        emit WithdrewTokens(beneficiary_, amount_);\\n    }\\n\\n    function _pause() internal {\\n        require(!paused, \\\"Already paused\\\");\\n        paused = true;\\n        emit Paused();\\n    }\\n\\n    function _unpause() internal {\\n        require(paused, \\\"Not paused\\\");\\n        paused = false;\\n        emit Unpaused();\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setInterestPrecision(uint256 interestPrecision_) external onlyOwner {\\n        require(interestPrecision_ > 0, \\\"Precision cannot be 0\\\");\\n        uint256 prevValue = interestPrecision;\\n        interestPrecision = interestPrecision_;\\n        emit InterestPrecisionChanged(prevValue, interestPrecision);\\n    }\\n\\n    function nextDripAt(address claimerAddress) public view returns (uint256) {\\n        require(stakes[claimerAddress].staked == true, \\\"Address has not staked\\\");\\n        return stakes[claimerAddress].lastRedeemedAt + redeemInterval;\\n    }\\n\\n    function canWithdrawStakeIn(address staker) public view returns (uint256) {\\n        require(stakes[staker].exists, \\\"Stakeholder does not exist\\\");\\n        require(stakes[staker].staked == false, \\\"Stakeholder still has stake\\\");\\n        uint256 unstakeTenure = block.timestamp - stakes[staker].unstakedTime;\\n        if (coolOff < unstakeTenure) return 0;\\n        return coolOff - unstakeTenure;\\n    }\\n} \",\"keccak256\":\"0xfb5a1b093aa9a94a0ff355e8b89e45f3169d58908e64292b564b1406548aca2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6137de8061007e6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c8063417473f714620000635780635c39f4671462000092578063715018a614620000b85780638da5cb5b14620000c4578063f2fde38b14620000ce575b600080fd5b6200007a6200007436600462000431565b620000e5565b604051620000899190620004cd565b60405180910390f35b620000a9620000a3366004620004e1565b62000238565b60405162000089919062000508565b620000c2620002b0565b005b6200007a620002c8565b620000c2620000df366004620004e1565b620002d7565b6000620000f16200035a565b858585858560405162000104906200040d565b6200011495949392919062000557565b604051809103906000f08015801562000131573d6000803e3d6000fd5b506001600160a01b03878116600090815260016020818152604083208054928301815583529091200180546001600160a01b031916918316918217905590915063f2fde38b62000180620002c8565b6040518263ffffffff1660e01b81526004016200019e9190620004cd565b600060405180830381600087803b158015620001b957600080fd5b505af1158015620001ce573d6000803e3d6000fd5b505050506001600160a01b038681166000818152600160209081526040918290205482518a8152918201899052818301529051928416927f7c609e6994063e28f241d13f523757bb9f7036ff57efc479c32b26e6a00ceced9181900360600190a395945050505050565b6001600160a01b038116600090815260016020908152604091829020805483518184028101840190945280845260609392830182828015620002a457602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000285575b50505050509050919050565b620002ba6200035a565b620002c66000620003bd565b565b6000546001600160a01b031690565b620002e16200035a565b6001600160a01b0381166200034c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200035781620003bd565b50565b3362000365620002c8565b6001600160a01b031614620002c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000343565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61320580620005a483390190565b6001600160a01b03811681146200035757600080fd5b6000806000806000608086880312156200044a57600080fd5b853562000457816200041b565b9450602086013593506040860135925060608601356001600160401b03808211156200048257600080fd5b818801915088601f8301126200049757600080fd5b813581811115620004a757600080fd5b896020828501011115620004ba57600080fd5b9699959850939650602001949392505050565b6001600160a01b0391909116815260200190565b600060208284031215620004f457600080fd5b813562000501816200041b565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156200054b5783516001600160a01b03168352928401929184019160010162000524565b50909695505050505050565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f1916010194935050505056fe60c06040523480156200001157600080fd5b5060405162003205380380620032058339810160408190526200003491620002c1565b6200003f33620001ac565b600180556001600160a01b0384166200008e5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b60448201526064015b60405180910390fd5b6000815111620000ce5760405162461bcd60e51b815260206004820152600a602482015269456d707479206e616d6560b01b604482015260640162000085565b6001600160a01b03841660805260a08290526003620000ee8282620003c5565b5082600981905550836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156200015857506040513d6000823e601f3d908101601f1916820160405262000155919081019062000491565b60015b62000191576040805180820190915260078152662aa725a727aba760c91b60208201526002906200018a9082620003c5565b50620001a2565b60026200019f8282620003c5565b50505b50505050620004d1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022457600080fd5b81516001600160401b0380821115620002415762000241620001fc565b604051601f8301601f19908116603f011681019082821181831017156200026c576200026c620001fc565b816040528381526020925086838588010111156200028957600080fd5b600091505b83821015620002ad57858201830151818301840152908201906200028e565b600093810190920192909252949350505050565b60008060008060808587031215620002d857600080fd5b84516001600160a01b0381168114620002f057600080fd5b60208601516040870151606088015192965090945092506001600160401b038111156200031c57600080fd5b6200032a8782880162000212565b91505092959194509250565b600181811c908216806200034b57607f821691505b6020821081036200036c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c057600081815260208120601f850160051c810160208610156200039b5750805b601f850160051c820191505b81811015620003bc57828155600101620003a7565b5050505b505050565b81516001600160401b03811115620003e157620003e1620001fc565b620003f981620003f2845462000336565b8462000372565b602080601f831160018114620004315760008415620004185750858301515b600019600386901b1c1916600185901b178555620003bc565b600085815260208120601f198616915b82811015620004625788860151825594840194600190910190840162000441565b5085821015620004815787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620004a457600080fd5b81516001600160401b03811115620004bb57600080fd5b620004c98482850162000212565b949350505050565b60805160a051612cd66200052f600039600081816103af01528181610acb01528181610b030152610b3b015260008181610456015281816106d10152818161166801528181611b3f01528181611d550152611d970152612cd66000f3fe608060405234801561001057600080fd5b50600436106102235760003560e01c80628cc26214610228578062ca8af71461024e57806306b091f91461027857806316934fc41461028d5780631a893239146103415780632512f3cc146103545780632d7aa82b146103675780632def66201461037a57806334fcf4371461038257806339a99072146103955780633b97e856146103aa5780633e0a322d146103d15780633f4ba83a146103e45780635c975abb146103ec5780635d80ca32146104095780635ed2b68214610412578063601e775814610425578063658b67291461042e5780636ab9bba714610436578063715018a61461044957806372f702f31461045157806378e97925146104905780637b61c320146104995780637e18627d146104ae578063817b1cd2146104c15780638456cb59146104ca5780638da5cb5b146104d257806399bc0aea146104da5780639f37a0da146104e3578063a212c5aa146104ec578063a5ff3f80146104ff578063a694fc3a14610508578063acad41a41461051b578063b8f261e91461052e578063bed9d86114610541578063c392f76614610549578063c63410e414610552578063d02f02451461055b578063dcc2a55e1461056e578063df15613814610581578063eb4af0451461058a578063f014f96d1461059d578063f1887684146105b0578063f2fde38b146105b9578063f33c7826146105cc578063f3466dfa146105d5578063f35dad40146105dd575b600080fd5b61023b610236366004612824565b6105e6565b6040519081526020015b60405180910390f35b61026161025c366004612824565b6105f7565b604080519215158352602083019190915201610245565b61028b61028636600461283f565b610667565b005b6102f161029b366004612824565b60136020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600790970154959660ff8087169761010088048216976201000090049091169594939291908a565b604080519a8b5298151560208b0152961515978901979097529315156060880152608087019290925260a086015260c085015260e084015261010083019190915261012082015261014001610245565b61028b61034f366004612869565b61073f565b61028b610362366004612869565b6107d5565b61028b610375366004612882565b61097c565b61028b610bf6565b61028b610390366004612869565b610ff5565b61039d611037565b60405161024591906128c5565b61023b7f000000000000000000000000000000000000000000000000000000000000000081565b61028b6103df366004612869565b611099565b61028b611290565b6004546103f99060ff1681565b6040519015158152602001610245565b61023b60075481565b61028b610420366004612869565b6112a0565b61023b60085481565b60145461023b565b6103f9610444366004612824565b6112e2565b61028b6113fd565b6104787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610245565b61023b600f5481565b6104a161140f565b6040516102459190612936565b61023b6104bc366004612824565b61149d565b61023b60055481565b61028b61152f565b61047861153f565b61023b60115481565b61023b600c5481565b61028b6104fa366004612824565b61154e565b61023b600b5481565b61028b610516366004612869565b611741565b610478610529366004612869565b611ba9565b61028b61053c366004612869565b611bd3565b61028b611c15565b61023b60095481565b61023b600e5481565b61028b610569366004612869565b611ee1565b61028b61057c366004612869565b611f72565b61023b60105481565b61028b610598366004612869565b61201a565b61023b6105ab366004612824565b6120c2565b61023b60065481565b61028b6105c7366004612824565b61218e565b61023b600d5481565b6104a1612204565b61023b600a5481565b60006105f182612211565b92915050565b60008060005b60145481101561065b57836001600160a01b03166014828154811061062457610624612969565b6000918252602090912001546001600160a01b03160361064957600194909350915050565b8061065381612995565b9150506105fd565b50600093849350915050565b61066f61230a565b600081116106c45760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742068617320746f2062652067726561746572207468616e20300060448201526064015b60405180910390fd5b6106f86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612369565b816001600160a01b03167fc7373a0f64b3fe06c2144779575ea56ae879f4d815db065edd84fa72d744f1288260405161073391815260200190565b60405180910390a25050565b61074761230a565b6000811161078f5760405162461bcd60e51b81526020600482015260156024820152740507265636973696f6e2063616e6e6f74206265203605c1b60448201526064016106bb565b600e8054908290556040517f6c2a878920b0b43b70ba805d253b8ef45d63e2650fe183b92209f56d25faa077906107c990839085906129ae565b60405180910390a15050565b6107dd61230a565b6000811161082b5760405162461bcd60e51b815260206004820152601b60248201527a04d617820706f6f6c20616d6f756e742063616e6e6f74206265203602c1b60448201526064016106bb565b60065481101561088b5760405162461bcd60e51b81526020600482015260376024820152600080516020612c818339815191526044820152761c881d1a185b881b5a5b881cdd185ad948185b5bdd5b9d604a1b60648201526084016106bb565b6007548110156108eb5760405162461bcd60e51b81526020600482015260376024820152600080516020612c818339815191526044820152761c881d1a185b881b585e081cdd185ad948185b5bdd5b9d604a1b60648201526084016106bb565b600c805490829055808211156109255780600c5461090991906129bc565b600d600082825461091a91906129cf565b909155506109499050565b600c5461093290826129bc565b600d600082825461094391906129bc565b90915550505b7fd898486a6236f7d01b8c7202d7bdd86aed5338edb12cd160e26a6da5cf7b873581600c546040516107c99291906129ae565b61098461230a565b60125460ff16156109cd5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016106bb565b60008611610a0d5760405162461bcd60e51b815260206004820152600d60248201526c04d696e207374616b65203d203609c1b60448201526064016106bb565b85851015610a495760405162461bcd60e51b815260206004820152600960248201526826b0bc101e1036b4b760b91b60448201526064016106bb565b84821015610a865760405162461bcd60e51b815260206004820152600a6024820152690a0deded8407840dac2f60b31b60448201526064016106bb565b60008111610ac65760405162461bcd60e51b815260206004820152600d60248201526c0507265636973696f6e203d203609c1b60448201526064016106bb565b610af17f0000000000000000000000000000000000000000000000000000000000000000600a612ac6565b610afb9087612ad2565b600655610b297f0000000000000000000000000000000000000000000000000000000000000000600a612ac6565b610b339086612ad2565b600755610b617f0000000000000000000000000000000000000000000000000000000000000000600a612ac6565b610b6b9083612ad2565b600c8190556008859055600b849055600e829055600d8190556012805460ff19166001179055600654600754604080519283526020830191909152810186905260608101859052608081019190915260a081018290527f880fa85ac6969827fc8f6a2a8b236fc9789ece8c82b41b17d0865b747de1b9139060c00160405180910390a1505050505050565b3360009081526013602052604090206001015460ff16610c285760405162461bcd60e51b81526004016106bb90612ae9565b3360009081526013602052604090206001015462010000900460ff1615610c615760405162461bcd60e51b81526004016106bb90612b0d565b610c696123cc565b426011541115610cb95760405162461bcd60e51b815260206004820152601b60248201527a10dbdb9d1c9858dd081a185cdb89dd08195e1c1a5c9959081e595d602a1b60448201526064016106bb565b6000610cc433612211565b9050600060136000336001600160a01b03166001600160a01b0316815260200190815260200160002060405180610140016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff161515151581526020016001820160029054906101000a900460ff1615151515815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050428160a00181815250506000816020019015159081151581525050818161010001818152505060018160600190151590811515815250508060136000336001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160010160026101000a81548160ff0219169083151502179055506080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015561010082015181600601556101208201518160070155905050806000015160056000828254610eb091906129bc565b90915550508051600d8054600090610ec99084906129cf565b909155506000905080610edb336105f7565b9150915081610efc5760405162461bcd60e51b81526004016106bb90612b38565b60148054610f0c906001906129bc565b81548110610f1c57610f1c612969565b600091825260209091200154601480546001600160a01b039092169183908110610f4857610f48612969565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506014805480610f8757610f87612b67565b600082815260209020810160001990810180546001600160a01b0319169055019055825160405133917f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7591610fde91815260200190565b60405180910390a250505050610ff360018055565b565b610ffd61230a565b60098054908290556040517f4ac9052a820bf4f8c02d7588587cae835573b5b99ea7ad4ca002f17f319f7186906107c990839085906129ae565b6060601480548060200260200160405190810160405280929190818152602001828054801561108f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611071575b5050505050905090565b6110a161230a565b6000601054116110f05760405162461bcd60e51b815260206004820152601a60248201527914d95d081b585e081cdd185ada5b99c819185e5cc8199a5c9cdd60321b60448201526064016106bb565b600081116111395760405162461bcd60e51b8152602060048201526016602482015275053746172742074696d652063616e6e6f7420626520360541b60448201526064016106bb565b8042106111885760405162461bcd60e51b815260206004820181905260248201527f53746172742074696d65206d75737420626520696e207468652066757475726560448201526064016106bb565b600f8054908290556040517fbefe8e3983c0dc663c4ba451fc82d4ff7eb2e4ccc4b944874abea1ecc841feae906111c290839085906129ae565b60405180910390a1506011546010546111df906201518090612ad2565b600f546111ec91906129cf565b60118190556040517fc1d34aeb4255f8133073ad43ad4f599a7cc710a56627c930558742338339864a91611222918491906129ae565b60405180910390a160005b60145481101561128b57600f54601360006014848154811061125157611251612969565b60009182526020808320909101546001600160a01b031683528201929092526040019020600501558061128381612995565b91505061122d565b505050565b61129861230a565b610ff3612425565b6112a861230a565b600b8054908290556040517f92f8949f7bd43d3df08f807422fbea26604df863fef0aca2d4d2270c87c85d71906107c990839085906129ae565b6001600160a01b038116600090815260136020526040812060010154610100900460ff166113225760405162461bcd60e51b81526004016106bb90612b7d565b6001600160a01b03821660009081526013602052604090206001015460ff161561135e5760405162461bcd60e51b81526004016106bb90612bb1565b6001600160a01b038216600090815260136020526040902060019081015462010000900460ff161515146113cc5760405162461bcd60e51b8152602060048201526015602482015274139bdd081a5b881d5b9cdd185ad9481c195c9a5bd9605a1b60448201526064016106bb565b6001600160a01b0382166000908152601360205260408120600301546113f290426129bc565b600854109392505050565b61140561230a565b610ff36000612499565b6002805461141c90612be6565b80601f016020809104026020016040519081016040528092919081815260200182805461144890612be6565b80156114955780601f1061146a57610100808354040283529160200191611495565b820191906000526020600020905b81548152906001019060200180831161147857829003601f168201915b505050505081565b6001600160a01b038116600090815260136020526040812060019081015460ff161515146115065760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81a185cc81b9bdd081cdd185ad95960521b60448201526064016106bb565b600b546001600160a01b0383166000908152601360205260409020600501546105f191906129cf565b61153761230a565b610ff36124e9565b6000546001600160a01b031690565b6001600160a01b0381166000908152601360205260409020600101548190610100900460ff166115905760405162461bcd60e51b81526004016106bb90612b38565b600b546001600160a01b03821660009081526013602052604090206005015442916115ba916129cf565b11156116005760405162461bcd60e51b815260206004820152601560248201527410d85b9b9bdd0818db185a5b48191c9a5c081e595d605a1b60448201526064016106bb565b6116086123cc565b6001600160a01b038216600090815260136020526040902060019081015460ff161515146116485760405162461bcd60e51b81526004016106bb90612ae9565b600061165383612211565b9050801561168f5761168f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168483612369565b6001600160a01b038316600090815260136020526040812060040180548392906116ba9084906129cf565b90915550506001600160a01b038316600090815260136020526040812042600590910155600a80548392906116f09084906129cf565b90915550506040518181526001600160a01b038416907f2d5429efdeca7741a8cd94067b18d988bc4e5f1d5b8272c37b7bfc31e9bfa32c9060200160405180910390a25061173d60018055565b5050565b60125460ff166117855760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b9a5d1a585b1a5e9959608a1b60448201526064016106bb565b3360009081526013602052604090206001015460ff16156117d95760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b60448201526064016106bb565b3360009081526013602052604090206001015462010000900460ff16156118125760405162461bcd60e51b81526004016106bb90612b0d565b60115442106118565760405162461bcd60e51b815260206004820152601060248201526f10dbdb9d1c9858dd08195e1c1a5c995960821b60448201526064016106bb565b61185e6123cc565b600c548160055461186f91906129cf565b11156118ba5760405162461bcd60e51b815260206004820152601a60248201527945786365656473206d6178696d756d20706f6f6c2076616c756560301b60448201526064016106bb565b60065481101561190c5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420616d6f756e743a2062656c6f77206d696e696d756d00000060448201526064016106bb565b60075481111561195e5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420616d6f756e743a2061626f7665206d6178696d756d00000060448201526064016106bb565b336000908152601360209081526040918290208251610140810184528154815260018083015460ff6101008083048216151597850188905262010000909204161515606084015260028401546080840152600384015460a0840152600484015460c0840152600584015460e08401526006840154908301526007909201546101208201529182015290611a33576001604082018190526014805491820181556000527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b031916331790555b426080820152600060c0820152600f5415611a5557600f5460e0820152611a5c565b4260e08201525b8181526101208101828152600061010080840182815233835260136020908152604080852087518155918701516001830180549289015160608a015161ffff1990941692151561ff001916929092179115159095021762ff000019166201000091151591909102179092556080850151600283015560a0850151600383015560c0850151600483015560e0850151600580840191909155905160068301559251600790910155815484929190611b139084906129cf565b9250508190555081600d6000828254611b2c91906129bc565b90915550611b6790506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612565565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a250611ba660018055565b50565b60148181548110611bb957600080fd5b6000918252602090912001546001600160a01b0316905081565b611bdb61230a565b60088054908290556040517fa16ca404a4d3ddb7408ea136a081abdee15b5fe9bc9983214f1f3b2eb5e62f50906107c990839085906129ae565b3360009081526013602052604090206001015462010000900460ff16611c6c5760405162461bcd60e51b815260206004820152600c60248201526b139bdd081d5b9cdd185ad95960a21b60448201526064016106bb565b611c75336112e2565b611cb75760405162461bcd60e51b815260206004820152601360248201527210d85b9b9bdd081dda5d1a191c985dc81e595d606a1b60448201526064016106bb565b336000818152601360209081526040918290208251610140810184528154808252600183015460ff80821615159584019590955261010080820486161515968401969096526201000090049093161515606082015260028201546080820152600382015460a0820152600482015460c0820152600582015460e0820152600682015493810184905260079091015461012082015292909190611d84907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084612369565b8015611dbe57611dbe6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612369565b60008084526101008401819052606084015260c083018051829190611de49083906129cf565b9052504260e0840190815233600090815260136020908152604080832087518155918701516001830180549289015160608a015161ffff1990941692151561ff0019169290921761010092151583021762ff000019166201000093151593909302929092179091556080870151600283015560a0870151600383015560c0870151600483015592516005820155918501516006830155610120850151600790920191909155600a8054839290611e9b9084906129cf565b909155505060405133907f874b6b6176c92c12e9ffa729ba947c2b035854d42b9df613ee4100f08548136790611ed490859085906129ae565b60405180910390a2505050565b611ee961230a565b60008111611f385760405162461bcd60e51b815260206004820152601c60248201527b04d6178207374616b696e6720646179732063616e6e6f7420626520360241b60448201526064016106bb565b60108054908290556040517f95eefe30ebca5de8a85a0c43414c2c9bded2586ace792308643802479598b7c3906107c990839085906129ae565b611f7a61230a565b60008111611fe05760405162461bcd60e51b815260206004820152602d60248201527f4d6178696d756d207374616b6520616d6f756e742073686f756c64206265206760448201526c0726561746572207468616e203609c1b60648201526084016106bb565b60078054908290556040517f7af071d76489ff69e32618f091b5d6de46af889de44f621a936e8c9615c463a9906107c990839085906129ae565b61202261230a565b600081116120885760405162461bcd60e51b815260206004820152602d60248201527f4d696e696d756d207374616b6520616d6f756e742073686f756c64206265206760448201526c0726561746572207468616e203609c1b60648201526084016106bb565b60068054908290556040517f3b8dcd7d08f8aa9e93d2afc54830c8b23db9b7264f3bc503eb5fc2a0289bc2cb906107c990839085906129ae565b6001600160a01b038116600090815260136020526040812060010154610100900460ff166121025760405162461bcd60e51b81526004016106bb90612b7d565b6001600160a01b03821660009081526013602052604090206001015460ff161561213e5760405162461bcd60e51b81526004016106bb90612bb1565b6001600160a01b03821660009081526013602052604081206003015461216490426129bc565b90508060085410156121795750600092915050565b8060085461218791906129bc565b9392505050565b61219661230a565b6001600160a01b0381166121fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bb565b611ba681612499565b6003805461141c90612be6565b6001600160a01b03811660009081526013602052604081206001015460ff161515810361224057506000919050565b600060115442111561227c576001600160a01b03831660009081526013602052604090206005015460115461227591906129bc565b90506122a5565b6001600160a01b0383166000908152601360205260409020600501546122a290426129bc565b90505b6009546001600160a01b0384166000908152601360205260409020546122cb9083612ad2565b6122d59190612ad2565b91506122e66201518061016d612ad2565b6064600e54846122f69190612c20565b6123009190612c20565b6121879190612c20565b3361231361153f565b6001600160a01b031614610ff35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106bb565b6040516001600160a01b03831660248201526044810182905261128b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125a3565b60026001540361241e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106bb565b6002600155565b60045460ff166124645760405162461bcd60e51b815260206004820152600a602482015269139bdd081c185d5cd95960b21b60448201526064016106bb565b6004805460ff191690556040517fa45f47fdea8a1efdd9029a5691c7f759c32b7c698632b563573e155625d1693390600090a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60045460ff161561252d5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481c185d5cd95960921b60448201526064016106bb565b6004805460ff191660011790556040517f9e87fac88ff661f02d44f95383c817fece4bce600a3dab7a54406878b965e75290600090a1565b6040516001600160a01b038085166024830152831660448201526064810182905261259d9085906323b872dd60e01b90608401612395565b50505050565b60006125f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126789092919063ffffffff16565b90508051600014806126195750808060200190518101906126199190612c42565b61128b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bb565b6060612687848460008561268f565b949350505050565b6060824710156126f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bb565b600080866001600160a01b0316858760405161270c9190612c64565b60006040518083038185875af1925050503d8060008114612749576040519150601f19603f3d011682016040523d82523d6000602084013e61274e565b606091505b509150915061275f8783838761276a565b979650505050505050565b606083156127d95782516000036127d2576001600160a01b0385163b6127d25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bb565b5081612687565b61268783838151156127ee5781518083602001fd5b8060405162461bcd60e51b81526004016106bb9190612936565b80356001600160a01b038116811461281f57600080fd5b919050565b60006020828403121561283657600080fd5b61218782612808565b6000806040838503121561285257600080fd5b61285b83612808565b946020939093013593505050565b60006020828403121561287b57600080fd5b5035919050565b60008060008060008060c0878903121561289b57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252825182820181905260009190848201906040850190845b818110156129065783516001600160a01b0316835292840192918401916001016128e1565b50909695505050505050565b60005b8381101561292d578181015183820152602001612915565b50506000910152565b6020815260008251806020840152612955816040850160208701612912565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016129a7576129a761297f565b5060010190565b918252602082015260400190565b818103818111156105f1576105f161297f565b808201808211156105f1576105f161297f565b600181815b80851115612a1d578160001904821115612a0357612a0361297f565b80851615612a1057918102915b93841c93908002906129e7565b509250929050565b600082612a34575060016105f1565b81612a41575060006105f1565b8160018114612a575760028114612a6157612a7d565b60019150506105f1565b60ff841115612a7257612a7261297f565b50506001821b6105f1565b5060208310610133831016604e8410600b8410161715612aa0575081810a6105f1565b612aaa83836129e2565b8060001904821115612abe57612abe61297f565b029392505050565b60006121878383612a25565b80820281158282048414176105f1576105f161297f565b6020808252600a9082015269139bdd081cdd185ad95960b21b604082015260600190565b602080825260119082015270125b881d5b9cdd185ad9481c195c9a5bd9607a1b604082015260600190565b60208082526015908201527414dd185ad95c88191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b6020808252601a908201527914dd185ad95a1bdb19195c88191bd95cc81b9bdd08195e1a5cdd60321b604082015260600190565b6020808252601b908201527a5374616b65686f6c646572207374696c6c20686173207374616b6560281b604082015260600190565b600181811c90821680612bfa57607f821691505b602082108103612c1a57634e487b7160e01b600052602260045260246000fd5b50919050565b600082612c3d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612c5457600080fd5b8151801515811461218757600080fd5b60008251612c76818460208701612912565b919091019291505056fe4d617820706f6f6c20616d6f756e742073686f756c6420626520677265617465a2646970667358221220c2abc3f5d1cdce10d6e322dad73d39da029054af4ef893000a2820c540aad8b364736f6c63430008110033a2646970667358221220d588966fc537faaeccb3cdd96357d81fd5ba9203dc8999b5288a30d92a1ac3d964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingContractFactory.sol:StakingContractFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6541,
        "contract": "contracts/StakingContractFactory.sol:StakingContractFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      }
    }
  }
}